; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\os_task.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\os_task.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\include -I.\TTS -I.\OLED -I.\ucosii\config -I.\ucosii\port -I.\ucosii\source -I.\RTE\_Target_1 -ID:\Coding\MDKeil\ARM\PACK\ARM\CMSIS\5.4.0\Device\ARM\ARMCM3\Include -ID:\Coding\MDKeil\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DARMCM3 --omf_browse=.\objects\os_task.crf ucosii\source\os_task.c]
                          THUMB

                          AREA ||i.OSTaskChangePrio||, CODE, READONLY, ALIGN=2

                  OSTaskChangePrio PROC
;;;50     #if OS_TASK_CHANGE_PRIO_EN > 0
;;;51     INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;52     {
000004  b085              SUB      sp,sp,#0x14
000006  4688              MOV      r8,r1
;;;53     #if (OS_EVENT_EN)
;;;54         OS_EVENT  *pevent;
;;;55     #if (OS_EVENT_MULTI_EN > 0)
;;;56         OS_EVENT **pevents;
;;;57     #endif
;;;58     #endif
;;;59         OS_TCB    *ptcb;
;;;60         INT8U      y_new;
;;;61         INT8U      x_new;
;;;62         INT8U      y_old;
;;;63     #if OS_LOWEST_PRIO <= 63
;;;64         INT8U      bity_new;
;;;65         INT8U      bitx_new;
;;;66         INT8U      bity_old;
;;;67         INT8U      bitx_old;
;;;68     #else
;;;69         INT16U     bity_new;
;;;70         INT16U     bitx_new;
;;;71         INT16U     bity_old;
;;;72         INT16U     bitx_old;
;;;73     #endif
;;;74     #if OS_CRITICAL_METHOD == 3
;;;75         OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
000008  2000              MOVS     r0,#0
00000a  9001              STR      r0,[sp,#4]
;;;76     #endif
;;;77     
;;;78     
;;;79     /*$PAGE*/
;;;80     #if OS_ARG_CHK_EN > 0
;;;81         if (oldprio >= OS_LOWEST_PRIO) {
;;;82             if (oldprio != OS_PRIO_SELF) {
;;;83                 return (OS_ERR_PRIO_INVALID);
;;;84             }
;;;85         }
;;;86         if (newprio >= OS_LOWEST_PRIO) {
;;;87             return (OS_ERR_PRIO_INVALID);
;;;88         }
;;;89     #endif
;;;90         OS_ENTER_CRITICAL();
00000c  f7fffffe          BL       OS_CPU_SR_Save
000010  9001              STR      r0,[sp,#4]
;;;91         if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
000012  485e              LDR      r0,|L1.396|
000014  f8500028          LDR      r0,[r0,r8,LSL #2]
000018  b130              CBZ      r0,|L1.40|
;;;92             OS_EXIT_CRITICAL();
00001a  9801              LDR      r0,[sp,#4]
00001c  f7fffffe          BL       OS_CPU_SR_Restore
;;;93             return (OS_ERR_PRIO_EXIST);
000020  2028              MOVS     r0,#0x28
                  |L1.34|
;;;94         }
;;;95         if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
;;;96             oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
;;;97         }
;;;98         ptcb = OSTCBPrioTbl[oldprio];
;;;99         if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
;;;100            OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
;;;101            return (OS_ERR_PRIO);
;;;102        }
;;;103        if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
;;;104            OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
;;;105            return (OS_ERR_TASK_NOT_EXIST);
;;;106        }
;;;107    #if OS_LOWEST_PRIO <= 63
;;;108        y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
;;;109        x_new                 = (INT8U)(newprio & 0x07);
;;;110        bity_new              = (INT8U)(1 << y_new);
;;;111        bitx_new              = (INT8U)(1 << x_new);
;;;112    #else
;;;113        y_new                 = (INT8U)((newprio >> 4) & 0x0F);
;;;114        x_new                 = (INT8U)( newprio & 0x0F);
;;;115        bity_new              = (INT16U)(1 << y_new);
;;;116        bitx_new              = (INT16U)(1 << x_new);
;;;117    #endif
;;;118    
;;;119        OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
;;;120        OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
;;;121        y_old                 =  ptcb->OSTCBY;
;;;122        bity_old              =  ptcb->OSTCBBitY;
;;;123        bitx_old              =  ptcb->OSTCBBitX;
;;;124        if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
;;;125             OSRdyTbl[y_old] &= ~bitx_old;
;;;126             if (OSRdyTbl[y_old] == 0) {
;;;127                 OSRdyGrp &= ~bity_old;
;;;128             }
;;;129             OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
;;;130             OSRdyTbl[y_new] |= bitx_new;
;;;131        }
;;;132    
;;;133    #if (OS_EVENT_EN)
;;;134        pevent = ptcb->OSTCBEventPtr;
;;;135        if (pevent != (OS_EVENT *)0) {
;;;136            pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
;;;137            if (pevent->OSEventTbl[y_old] == 0) {
;;;138                pevent->OSEventGrp    &= ~bity_old;
;;;139            }
;;;140            pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
;;;141            pevent->OSEventTbl[y_new] |= bitx_new;
;;;142        }
;;;143    #if (OS_EVENT_MULTI_EN > 0)
;;;144        if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
;;;145            pevents =  ptcb->OSTCBEventMultiPtr;
;;;146            pevent  = *pevents;
;;;147            while (pevent != (OS_EVENT *)0) {
;;;148                pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
;;;149                if (pevent->OSEventTbl[y_old] == 0) {
;;;150                    pevent->OSEventGrp    &= ~bity_old;
;;;151                }
;;;152                pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
;;;153                pevent->OSEventTbl[y_new] |= bitx_new;
;;;154                pevents++;
;;;155                pevent                     = *pevents;
;;;156            }
;;;157        }
;;;158    #endif
;;;159    #endif
;;;160    
;;;161        ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
;;;162        ptcb->OSTCBY    = y_new;
;;;163        ptcb->OSTCBX    = x_new;
;;;164        ptcb->OSTCBBitY = bity_new;
;;;165        ptcb->OSTCBBitX = bitx_new;
;;;166        OS_EXIT_CRITICAL();
;;;167        if (OSRunning == OS_TRUE) {
;;;168            OS_Sched();                                         /* Find new highest priority task          */
;;;169        }
;;;170        return (OS_ERR_NONE);
;;;171    }
000022  b007              ADD      sp,sp,#0x1c
000024  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.40|
000028  9805              LDR      r0,[sp,#0x14]         ;95
00002a  28ff              CMP      r0,#0xff              ;95
00002c  d104              BNE      |L1.56|
00002e  4858              LDR      r0,|L1.400|
000030  6800              LDR      r0,[r0,#0]            ;96  ; OSTCBCur
000032  f8900032          LDRB     r0,[r0,#0x32]         ;96
000036  9005              STR      r0,[sp,#0x14]         ;96
                  |L1.56|
000038  4954              LDR      r1,|L1.396|
00003a  9805              LDR      r0,[sp,#0x14]         ;98
00003c  f8515020          LDR      r5,[r1,r0,LSL #2]     ;98
000040  b925              CBNZ     r5,|L1.76|
000042  9801              LDR      r0,[sp,#4]            ;100
000044  f7fffffe          BL       OS_CPU_SR_Restore
000048  2029              MOVS     r0,#0x29              ;101
00004a  e7ea              B        |L1.34|
                  |L1.76|
00004c  2d01              CMP      r5,#1                 ;103
00004e  d104              BNE      |L1.90|
000050  9801              LDR      r0,[sp,#4]            ;104
000052  f7fffffe          BL       OS_CPU_SR_Restore
000056  2043              MOVS     r0,#0x43              ;105
000058  e7e3              B        |L1.34|
                  |L1.90|
00005a  ea4f07e8          ASR      r7,r8,#3              ;108
00005e  f0080007          AND      r0,r8,#7              ;109
000062  9003              STR      r0,[sp,#0xc]          ;109
000064  2001              MOVS     r0,#1                 ;110
000066  40b8              LSLS     r0,r0,r7              ;110
000068  f00009ff          AND      r9,r0,#0xff           ;110
00006c  2101              MOVS     r1,#1                 ;111
00006e  9803              LDR      r0,[sp,#0xc]          ;111
000070  4081              LSLS     r1,r1,r0              ;111
000072  f0010aff          AND      r10,r1,#0xff          ;111
000076  2100              MOVS     r1,#0                 ;119
000078  4a44              LDR      r2,|L1.396|
00007a  9805              LDR      r0,[sp,#0x14]         ;119
00007c  f8421020          STR      r1,[r2,r0,LSL #2]     ;119
000080  4610              MOV      r0,r2                 ;120
000082  f8405028          STR      r5,[r0,r8,LSL #2]     ;120
000086  f8956034          LDRB     r6,[r5,#0x34]         ;121
00008a  f8950036          LDRB     r0,[r5,#0x36]         ;122
00008e  9002              STR      r0,[sp,#8]            ;122
000090  f895b035          LDRB     r11,[r5,#0x35]        ;123
000094  483f              LDR      r0,|L1.404|
000096  5d80              LDRB     r0,[r0,r6]            ;124
000098  ea00000b          AND      r0,r0,r11             ;124
00009c  b1d0              CBZ      r0,|L1.212|
00009e  483d              LDR      r0,|L1.404|
0000a0  5d80              LDRB     r0,[r0,r6]            ;125
0000a2  ea20000b          BIC      r0,r0,r11             ;125
0000a6  493b              LDR      r1,|L1.404|
0000a8  5588              STRB     r0,[r1,r6]            ;125
0000aa  4608              MOV      r0,r1                 ;126
0000ac  5d80              LDRB     r0,[r0,r6]            ;126
0000ae  b928              CBNZ     r0,|L1.188|
0000b0  4839              LDR      r0,|L1.408|
0000b2  7800              LDRB     r0,[r0,#0]            ;127  ; OSRdyGrp
0000b4  9902              LDR      r1,[sp,#8]            ;127
0000b6  4388              BICS     r0,r0,r1              ;127
0000b8  4937              LDR      r1,|L1.408|
0000ba  7008              STRB     r0,[r1,#0]            ;127
                  |L1.188|
0000bc  4836              LDR      r0,|L1.408|
0000be  7800              LDRB     r0,[r0,#0]            ;129  ; OSRdyGrp
0000c0  ea400009          ORR      r0,r0,r9              ;129
0000c4  4934              LDR      r1,|L1.408|
0000c6  7008              STRB     r0,[r1,#0]            ;129
0000c8  4832              LDR      r0,|L1.404|
0000ca  5dc0              LDRB     r0,[r0,r7]            ;130
0000cc  ea40000a          ORR      r0,r0,r10             ;130
0000d0  4930              LDR      r1,|L1.404|
0000d2  55c8              STRB     r0,[r1,r7]            ;130
                  |L1.212|
0000d4  69ec              LDR      r4,[r5,#0x1c]         ;134
0000d6  b1d4              CBZ      r4,|L1.270|
0000d8  f104000b          ADD      r0,r4,#0xb            ;136
0000dc  5d80              LDRB     r0,[r0,r6]            ;136
0000de  ea20000b          BIC      r0,r0,r11             ;136
0000e2  f104010b          ADD      r1,r4,#0xb            ;136
0000e6  5588              STRB     r0,[r1,r6]            ;136
0000e8  4608              MOV      r0,r1                 ;137
0000ea  5d80              LDRB     r0,[r0,r6]            ;137
0000ec  b918              CBNZ     r0,|L1.246|
0000ee  7aa0              LDRB     r0,[r4,#0xa]          ;138
0000f0  9902              LDR      r1,[sp,#8]            ;138
0000f2  4388              BICS     r0,r0,r1              ;138
0000f4  72a0              STRB     r0,[r4,#0xa]          ;138
                  |L1.246|
0000f6  7aa0              LDRB     r0,[r4,#0xa]          ;140
0000f8  ea400009          ORR      r0,r0,r9              ;140
0000fc  72a0              STRB     r0,[r4,#0xa]          ;140
0000fe  f104000b          ADD      r0,r4,#0xb            ;141
000102  5dc0              LDRB     r0,[r0,r7]            ;141
000104  ea40000a          ORR      r0,r0,r10             ;141
000108  f104010b          ADD      r1,r4,#0xb            ;141
00010c  55c8              STRB     r0,[r1,r7]            ;141
                  |L1.270|
00010e  6a28              LDR      r0,[r5,#0x20]         ;144
000110  b330              CBZ      r0,|L1.352|
000112  6a28              LDR      r0,[r5,#0x20]         ;145
000114  9004              STR      r0,[sp,#0x10]         ;145
000116  9804              LDR      r0,[sp,#0x10]         ;146
000118  6804              LDR      r4,[r0,#0]            ;146
00011a  e01f              B        |L1.348|
                  |L1.284|
00011c  f104000b          ADD      r0,r4,#0xb            ;148
000120  5d80              LDRB     r0,[r0,r6]            ;148
000122  ea20000b          BIC      r0,r0,r11             ;148
000126  f104010b          ADD      r1,r4,#0xb            ;148
00012a  5588              STRB     r0,[r1,r6]            ;148
00012c  4608              MOV      r0,r1                 ;149
00012e  5d80              LDRB     r0,[r0,r6]            ;149
000130  b918              CBNZ     r0,|L1.314|
000132  7aa0              LDRB     r0,[r4,#0xa]          ;150
000134  9902              LDR      r1,[sp,#8]            ;150
000136  4388              BICS     r0,r0,r1              ;150
000138  72a0              STRB     r0,[r4,#0xa]          ;150
                  |L1.314|
00013a  7aa0              LDRB     r0,[r4,#0xa]          ;152
00013c  ea400009          ORR      r0,r0,r9              ;152
000140  72a0              STRB     r0,[r4,#0xa]          ;152
000142  f104000b          ADD      r0,r4,#0xb            ;153
000146  5dc0              LDRB     r0,[r0,r7]            ;153
000148  ea40000a          ORR      r0,r0,r10             ;153
00014c  f104010b          ADD      r1,r4,#0xb            ;153
000150  55c8              STRB     r0,[r1,r7]            ;153
000152  9804              LDR      r0,[sp,#0x10]         ;154
000154  1d00              ADDS     r0,r0,#4              ;154
000156  9004              STR      r0,[sp,#0x10]         ;154
000158  9804              LDR      r0,[sp,#0x10]         ;155
00015a  6804              LDR      r4,[r0,#0]            ;155
                  |L1.348|
00015c  2c00              CMP      r4,#0                 ;147
00015e  d1dd              BNE      |L1.284|
                  |L1.352|
000160  f8858032          STRB     r8,[r5,#0x32]         ;161
000164  f8857034          STRB     r7,[r5,#0x34]         ;162
000168  9803              LDR      r0,[sp,#0xc]          ;163
00016a  f8850033          STRB     r0,[r5,#0x33]         ;163
00016e  f8859036          STRB     r9,[r5,#0x36]         ;164
000172  f885a035          STRB     r10,[r5,#0x35]        ;165
000176  9801              LDR      r0,[sp,#4]            ;166
000178  f7fffffe          BL       OS_CPU_SR_Restore
00017c  4807              LDR      r0,|L1.412|
00017e  7800              LDRB     r0,[r0,#0]            ;167  ; OSRunning
000180  2801              CMP      r0,#1                 ;167
000182  d101              BNE      |L1.392|
000184  f7fffffe          BL       OS_Sched
                  |L1.392|
000188  2000              MOVS     r0,#0                 ;170
00018a  e74a              B        |L1.34|
;;;172    #endif
                          ENDP

                  |L1.396|
                          DCD      OSTCBPrioTbl
                  |L1.400|
                          DCD      OSTCBCur
                  |L1.404|
                          DCD      OSRdyTbl
                  |L1.408|
                          DCD      OSRdyGrp
                  |L1.412|
                          DCD      OSRunning

                          AREA ||i.OSTaskCreate||, CODE, READONLY, ALIGN=2

                  OSTaskCreate PROC
;;;214    #if OS_TASK_CREATE_EN > 0
;;;215    INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;216    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  461c              MOV      r4,r3
;;;217        OS_STK    *psp;
;;;218        INT8U      err;
;;;219    #if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
;;;220        OS_CPU_SR  cpu_sr = 0;
00000c  f04f0900          MOV      r9,#0
;;;221    #endif
;;;222    
;;;223    
;;;224    
;;;225    #if OS_ARG_CHK_EN > 0
;;;226        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
;;;227            return (OS_ERR_PRIO_INVALID);
;;;228        }
;;;229    #endif
;;;230        OS_ENTER_CRITICAL();
000010  f7fffffe          BL       OS_CPU_SR_Save
000014  4681              MOV      r9,r0
;;;231        if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
000016  4820              LDR      r0,|L2.152|
000018  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00001a  2800              CMP      r0,#0
00001c  dd05              BLE      |L2.42|
;;;232            OS_EXIT_CRITICAL();
00001e  4648              MOV      r0,r9
000020  f7fffffe          BL       OS_CPU_SR_Restore
;;;233            return (OS_ERR_TASK_CREATE_ISR);
000024  203c              MOVS     r0,#0x3c
                  |L2.38|
;;;234        }
;;;235        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;236            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;237                                                 /* ... the same thing until task is created.              */
;;;238            OS_EXIT_CRITICAL();
;;;239            psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
;;;240            err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
;;;241            if (err == OS_ERR_NONE) {
;;;242                if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
;;;243                    OS_Sched();
;;;244                }
;;;245            } else {
;;;246                OS_ENTER_CRITICAL();
;;;247                OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
;;;248                OS_EXIT_CRITICAL();
;;;249            }
;;;250            return (err);
;;;251        }
;;;252        OS_EXIT_CRITICAL();
;;;253        return (OS_ERR_PRIO_EXIST);
;;;254    }
000026  e8bd8ffe          POP      {r1-r11,pc}
                  |L2.42|
00002a  481c              LDR      r0,|L2.156|
00002c  f8500024          LDR      r0,[r0,r4,LSL #2]     ;235
000030  bb60              CBNZ     r0,|L2.140|
000032  2001              MOVS     r0,#1                 ;236
000034  4919              LDR      r1,|L2.156|
000036  f8410024          STR      r0,[r1,r4,LSL #2]     ;236
00003a  4648              MOV      r0,r9                 ;238
00003c  f7fffffe          BL       OS_CPU_SR_Restore
000040  2300              MOVS     r3,#0                 ;239
000042  4642              MOV      r2,r8                 ;239
000044  4639              MOV      r1,r7                 ;239
000046  4630              MOV      r0,r6                 ;239
000048  f7fffffe          BL       OSTaskStkInit
00004c  4682              MOV      r10,r0                ;239
00004e  2000              MOVS     r0,#0                 ;240
000050  9000              STR      r0,[sp,#0]            ;240
000052  9001              STR      r0,[sp,#4]            ;240
000054  4603              MOV      r3,r0                 ;240
000056  4602              MOV      r2,r0                 ;240
000058  4651              MOV      r1,r10                ;240
00005a  9002              STR      r0,[sp,#8]            ;240
00005c  4620              MOV      r0,r4                 ;240
00005e  f7fffffe          BL       OS_TCBInit
000062  4605              MOV      r5,r0                 ;240
000064  b935              CBNZ     r5,|L2.116|
000066  480e              LDR      r0,|L2.160|
000068  7800              LDRB     r0,[r0,#0]            ;242  ; OSRunning
00006a  2801              CMP      r0,#1                 ;242
00006c  d10c              BNE      |L2.136|
00006e  f7fffffe          BL       OS_Sched
000072  e009              B        |L2.136|
                  |L2.116|
000074  f7fffffe          BL       OS_CPU_SR_Save
000078  4681              MOV      r9,r0                 ;246
00007a  2000              MOVS     r0,#0                 ;247
00007c  4907              LDR      r1,|L2.156|
00007e  f8410024          STR      r0,[r1,r4,LSL #2]     ;247
000082  4648              MOV      r0,r9                 ;248
000084  f7fffffe          BL       OS_CPU_SR_Restore
                  |L2.136|
000088  4628              MOV      r0,r5                 ;250
00008a  e7cc              B        |L2.38|
                  |L2.140|
00008c  4648              MOV      r0,r9                 ;252
00008e  f7fffffe          BL       OS_CPU_SR_Restore
000092  2028              MOVS     r0,#0x28              ;253
000094  e7c7              B        |L2.38|
;;;255    #endif
                          ENDP

000096  0000              DCW      0x0000
                  |L2.152|
                          DCD      OSIntNesting
                  |L2.156|
                          DCD      OSTCBPrioTbl
                  |L2.160|
                          DCD      OSRunning

                          AREA ||i.OSTaskCreateExt||, CODE, READONLY, ALIGN=2

                  OSTaskCreateExt PROC
;;;327    #if OS_TASK_CREATE_EXT_EN > 0
;;;328    INT8U  OSTaskCreateExt (void   (*task)(void *p_arg),
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;329                            void    *p_arg,
;;;330                            OS_STK  *ptos,
;;;331                            INT8U    prio,
;;;332                            INT16U   id,
;;;333                            OS_STK  *pbos,
;;;334                            INT32U   stk_size,
;;;335                            void    *pext,
;;;336                            INT16U   opt)
;;;337    {
000004  b085              SUB      sp,sp,#0x14
000006  4681              MOV      r9,r0
000008  468a              MOV      r10,r1
00000a  4693              MOV      r11,r2
00000c  461c              MOV      r4,r3
00000e  e9dd780f          LDRD     r7,r8,[sp,#0x3c]
000012  9d12              LDR      r5,[sp,#0x48]
;;;338        OS_STK    *psp;
;;;339        INT8U      err;
;;;340    #if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
;;;341        OS_CPU_SR  cpu_sr = 0;
000014  2000              MOVS     r0,#0
000016  9003              STR      r0,[sp,#0xc]
;;;342    #endif
;;;343    
;;;344    
;;;345    
;;;346    #if OS_ARG_CHK_EN > 0
;;;347        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
;;;348            return (OS_ERR_PRIO_INVALID);
;;;349        }
;;;350    #endif
;;;351        OS_ENTER_CRITICAL();
000018  f7fffffe          BL       OS_CPU_SR_Save
00001c  9003              STR      r0,[sp,#0xc]
;;;352        if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
00001e  4823              LDR      r0,|L3.172|
000020  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000022  2800              CMP      r0,#0
000024  dd06              BLE      |L3.52|
;;;353            OS_EXIT_CRITICAL();
000026  9803              LDR      r0,[sp,#0xc]
000028  f7fffffe          BL       OS_CPU_SR_Restore
;;;354            return (OS_ERR_TASK_CREATE_ISR);
00002c  203c              MOVS     r0,#0x3c
                  |L3.46|
;;;355        }
;;;356        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;357            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;358                                                 /* ... the same thing until task is created.              */
;;;359            OS_EXIT_CRITICAL();
;;;360    
;;;361    #if (OS_TASK_STAT_STK_CHK_EN > 0)
;;;362            OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
;;;363    #endif
;;;364    
;;;365            psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
;;;366            err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
;;;367            if (err == OS_ERR_NONE) {
;;;368                if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
;;;369                    OS_Sched();
;;;370                }
;;;371            } else {
;;;372                OS_ENTER_CRITICAL();
;;;373                OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
;;;374                OS_EXIT_CRITICAL();
;;;375            }
;;;376            return (err);
;;;377        }
;;;378        OS_EXIT_CRITICAL();
;;;379        return (OS_ERR_PRIO_EXIST);
;;;380    }
00002e  b005              ADD      sp,sp,#0x14
000030  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.52|
000034  481e              LDR      r0,|L3.176|
000036  f8500024          LDR      r0,[r0,r4,LSL #2]     ;356
00003a  bb88              CBNZ     r0,|L3.160|
00003c  2001              MOVS     r0,#1                 ;357
00003e  491c              LDR      r1,|L3.176|
000040  f8410024          STR      r0,[r1,r4,LSL #2]     ;357
000044  9803              LDR      r0,[sp,#0xc]          ;359
000046  f7fffffe          BL       OS_CPU_SR_Restore
00004a  462a              MOV      r2,r5                 ;362
00004c  4641              MOV      r1,r8                 ;362
00004e  4638              MOV      r0,r7                 ;362
000050  f7fffffe          BL       OS_TaskStkClr
000054  462b              MOV      r3,r5                 ;365
000056  465a              MOV      r2,r11                ;365
000058  4651              MOV      r1,r10                ;365
00005a  4648              MOV      r0,r9                 ;365
00005c  f7fffffe          BL       OSTaskStkInit
000060  9004              STR      r0,[sp,#0x10]         ;365
000062  9811              LDR      r0,[sp,#0x44]         ;366
000064  e9cd8000          STRD     r8,r0,[sp,#0]         ;366
000068  9502              STR      r5,[sp,#8]            ;366
00006a  463a              MOV      r2,r7                 ;366
00006c  4620              MOV      r0,r4                 ;366
00006e  9b0e              LDR      r3,[sp,#0x38]         ;366
000070  9904              LDR      r1,[sp,#0x10]         ;366
000072  f7fffffe          BL       OS_TCBInit
000076  4606              MOV      r6,r0                 ;366
000078  b936              CBNZ     r6,|L3.136|
00007a  480e              LDR      r0,|L3.180|
00007c  7800              LDRB     r0,[r0,#0]            ;368  ; OSRunning
00007e  2801              CMP      r0,#1                 ;368
000080  d10c              BNE      |L3.156|
000082  f7fffffe          BL       OS_Sched
000086  e009              B        |L3.156|
                  |L3.136|
000088  f7fffffe          BL       OS_CPU_SR_Save
00008c  9003              STR      r0,[sp,#0xc]          ;372
00008e  2000              MOVS     r0,#0                 ;373
000090  4907              LDR      r1,|L3.176|
000092  f8410024          STR      r0,[r1,r4,LSL #2]     ;373
000096  9803              LDR      r0,[sp,#0xc]          ;374
000098  f7fffffe          BL       OS_CPU_SR_Restore
                  |L3.156|
00009c  4630              MOV      r0,r6                 ;376
00009e  e7c6              B        |L3.46|
                  |L3.160|
0000a0  e7ff              B        |L3.162|
                  |L3.162|
0000a2  9803              LDR      r0,[sp,#0xc]          ;378
0000a4  f7fffffe          BL       OS_CPU_SR_Restore
0000a8  2028              MOVS     r0,#0x28              ;379
0000aa  e7c0              B        |L3.46|
;;;381    #endif
                          ENDP

                  |L3.172|
                          DCD      OSIntNesting
                  |L3.176|
                          DCD      OSTCBPrioTbl
                  |L3.180|
                          DCD      OSRunning

                          AREA ||i.OSTaskDel||, CODE, READONLY, ALIGN=2

                  OSTaskDel PROC
;;;419    #if OS_TASK_DEL_EN > 0
;;;420    INT8U  OSTaskDel (INT8U prio)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;421    {
000004  4605              MOV      r5,r0
;;;422    #if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
;;;423        OS_FLAG_NODE *pnode;
;;;424    #endif
;;;425        OS_TCB       *ptcb;
;;;426    #if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
;;;427        OS_CPU_SR     cpu_sr = 0;
000006  2700              MOVS     r7,#0
;;;428    #endif
;;;429    
;;;430    
;;;431    
;;;432        if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
000008  484d              LDR      r0,|L4.320|
00000a  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000c  2800              CMP      r0,#0
00000e  dd02              BLE      |L4.22|
;;;433            return (OS_ERR_TASK_DEL_ISR);
000010  2040              MOVS     r0,#0x40
                  |L4.18|
;;;434        }
;;;435        if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
;;;436            return (OS_ERR_TASK_DEL_IDLE);
;;;437        }
;;;438    #if OS_ARG_CHK_EN > 0
;;;439        if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
;;;440            if (prio != OS_PRIO_SELF) {
;;;441                return (OS_ERR_PRIO_INVALID);
;;;442            }
;;;443        }
;;;444    #endif
;;;445    
;;;446    /*$PAGE*/
;;;447        OS_ENTER_CRITICAL();
;;;448        if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
;;;449            prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
;;;450        }
;;;451        ptcb = OSTCBPrioTbl[prio];
;;;452        if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
;;;453            OS_EXIT_CRITICAL();
;;;454            return (OS_ERR_TASK_NOT_EXIST);
;;;455        }
;;;456        if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
;;;457            OS_EXIT_CRITICAL();
;;;458            return (OS_ERR_TASK_DEL);
;;;459        }
;;;460    
;;;461        OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
;;;462        if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
;;;463            OSRdyGrp           &= ~ptcb->OSTCBBitY;
;;;464        }
;;;465        
;;;466    #if (OS_EVENT_EN)
;;;467        if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
;;;468            OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
;;;469        }
;;;470    #if (OS_EVENT_MULTI_EN > 0)
;;;471        if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
;;;472            OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
;;;473        }
;;;474    #endif
;;;475    #endif
;;;476    
;;;477    #if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
;;;478        pnode = ptcb->OSTCBFlagNode;
;;;479        if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
;;;480            OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
;;;481        }
;;;482    #endif
;;;483    
;;;484        ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
;;;485        ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
;;;486        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
;;;487        if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
;;;488            OSLockNesting++;
;;;489        }
;;;490        OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
;;;491        OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
;;;492        OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
;;;493        if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
;;;494            OSLockNesting--;
;;;495        }
;;;496        OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
;;;497        OSTaskCtr--;                                        /* One less task being managed                 */
;;;498        OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
;;;499        if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
;;;500            ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
;;;501            OSTCBList                  = ptcb->OSTCBNext;
;;;502        } else {
;;;503            ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
;;;504            ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
;;;505        }
;;;506        ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
;;;507        OSTCBFreeList     = ptcb;
;;;508    #if OS_TASK_NAME_SIZE > 1
;;;509        ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
;;;510        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
;;;511    #endif
;;;512        OS_EXIT_CRITICAL();
;;;513        if (OSRunning == OS_TRUE) {
;;;514            OS_Sched();                                     /* Find new highest priority task              */
;;;515        }
;;;516        return (OS_ERR_NONE);
;;;517    }
000012  e8bd81f0          POP      {r4-r8,pc}
                  |L4.22|
000016  2d1f              CMP      r5,#0x1f              ;435
000018  d101              BNE      |L4.30|
00001a  203e              MOVS     r0,#0x3e              ;436
00001c  e7f9              B        |L4.18|
                  |L4.30|
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4607              MOV      r7,r0                 ;447
000024  2dff              CMP      r5,#0xff              ;448
000026  d103              BNE      |L4.48|
000028  4846              LDR      r0,|L4.324|
00002a  6800              LDR      r0,[r0,#0]            ;449  ; OSTCBCur
00002c  f8905032          LDRB     r5,[r0,#0x32]         ;449
                  |L4.48|
000030  4845              LDR      r0,|L4.328|
000032  f8504025          LDR      r4,[r0,r5,LSL #2]     ;451
000036  b924              CBNZ     r4,|L4.66|
000038  4638              MOV      r0,r7                 ;453
00003a  f7fffffe          BL       OS_CPU_SR_Restore
00003e  2043              MOVS     r0,#0x43              ;454
000040  e7e7              B        |L4.18|
                  |L4.66|
000042  2c01              CMP      r4,#1                 ;456
000044  d104              BNE      |L4.80|
000046  4638              MOV      r0,r7                 ;457
000048  f7fffffe          BL       OS_CPU_SR_Restore
00004c  203d              MOVS     r0,#0x3d              ;458
00004e  e7e0              B        |L4.18|
                  |L4.80|
000050  f8140f34          LDRB     r0,[r4,#0x34]!        ;461
000054  493d              LDR      r1,|L4.332|
000056  5c08              LDRB     r0,[r1,r0]            ;461
000058  7861              LDRB     r1,[r4,#1]            ;461
00005a  4388              BICS     r0,r0,r1              ;461
00005c  7821              LDRB     r1,[r4,#0]            ;461
00005e  4a3b              LDR      r2,|L4.332|
000060  5450              STRB     r0,[r2,r1]            ;461
000062  f8140934          LDRB     r0,[r4],#-0x34        ;462
000066  4611              MOV      r1,r2                 ;462
000068  5c08              LDRB     r0,[r1,r0]            ;462
00006a  b930              CBNZ     r0,|L4.122|
00006c  f8941036          LDRB     r1,[r4,#0x36]         ;463
000070  4837              LDR      r0,|L4.336|
000072  7800              LDRB     r0,[r0,#0]            ;463  ; OSRdyGrp
000074  4388              BICS     r0,r0,r1              ;463
000076  4936              LDR      r1,|L4.336|
000078  7008              STRB     r0,[r1,#0]            ;463
                  |L4.122|
00007a  69e0              LDR      r0,[r4,#0x1c]         ;467
00007c  b118              CBZ      r0,|L4.134|
00007e  4620              MOV      r0,r4                 ;468
000080  69e1              LDR      r1,[r4,#0x1c]         ;468
000082  f7fffffe          BL       OS_EventTaskRemove
                  |L4.134|
000086  6a20              LDR      r0,[r4,#0x20]         ;471
000088  b118              CBZ      r0,|L4.146|
00008a  4620              MOV      r0,r4                 ;472
00008c  6a21              LDR      r1,[r4,#0x20]         ;472
00008e  f7fffffe          BL       OS_EventTaskRemoveMulti
                  |L4.146|
000092  6aa6              LDR      r6,[r4,#0x28]         ;478
000094  b116              CBZ      r6,|L4.156|
000096  4630              MOV      r0,r6                 ;480
000098  f7fffffe          BL       OS_FlagUnlink
                  |L4.156|
00009c  2000              MOVS     r0,#0                 ;484
00009e  85e0              STRH     r0,[r4,#0x2e]         ;484
0000a0  f8840030          STRB     r0,[r4,#0x30]         ;485
0000a4  f8840031          STRB     r0,[r4,#0x31]         ;486
0000a8  482a              LDR      r0,|L4.340|
0000aa  7800              LDRB     r0,[r0,#0]            ;487  ; OSLockNesting
0000ac  28ff              CMP      r0,#0xff              ;487
0000ae  d204              BCS      |L4.186|
0000b0  4828              LDR      r0,|L4.340|
0000b2  7800              LDRB     r0,[r0,#0]            ;488  ; OSLockNesting
0000b4  1c40              ADDS     r0,r0,#1              ;488
0000b6  4927              LDR      r1,|L4.340|
0000b8  7008              STRB     r0,[r1,#0]            ;488
                  |L4.186|
0000ba  4638              MOV      r0,r7                 ;490
0000bc  f7fffffe          BL       OS_CPU_SR_Restore
0000c0  f7fffffe          BL       OS_Dummy
0000c4  f7fffffe          BL       OS_CPU_SR_Save
0000c8  4607              MOV      r7,r0                 ;492
0000ca  4822              LDR      r0,|L4.340|
0000cc  7800              LDRB     r0,[r0,#0]            ;493  ; OSLockNesting
0000ce  2800              CMP      r0,#0                 ;493
0000d0  dd04              BLE      |L4.220|
0000d2  4820              LDR      r0,|L4.340|
0000d4  7800              LDRB     r0,[r0,#0]            ;494  ; OSLockNesting
0000d6  1e40              SUBS     r0,r0,#1              ;494
0000d8  491e              LDR      r1,|L4.340|
0000da  7008              STRB     r0,[r1,#0]            ;494
                  |L4.220|
0000dc  4620              MOV      r0,r4                 ;496
0000de  f7fffffe          BL       OSTaskDelHook
0000e2  481d              LDR      r0,|L4.344|
0000e4  7800              LDRB     r0,[r0,#0]            ;497  ; OSTaskCtr
0000e6  1e40              SUBS     r0,r0,#1              ;497
0000e8  491b              LDR      r1,|L4.344|
0000ea  7008              STRB     r0,[r1,#0]            ;497
0000ec  2000              MOVS     r0,#0                 ;498
0000ee  4916              LDR      r1,|L4.328|
0000f0  f8410025          STR      r0,[r1,r5,LSL #2]     ;498
0000f4  69a0              LDR      r0,[r4,#0x18]         ;499
0000f6  b930              CBNZ     r0,|L4.262|
0000f8  2000              MOVS     r0,#0                 ;500
0000fa  6961              LDR      r1,[r4,#0x14]         ;500
0000fc  6188              STR      r0,[r1,#0x18]         ;500
0000fe  4917              LDR      r1,|L4.348|
000100  6960              LDR      r0,[r4,#0x14]         ;501
000102  6008              STR      r0,[r1,#0]            ;501  ; OSTCBList
000104  e005              B        |L4.274|
                  |L4.262|
000106  e9d40105          LDRD     r0,r1,[r4,#0x14]      ;503
00010a  6148              STR      r0,[r1,#0x14]         ;503
00010c  e9d41005          LDRD     r1,r0,[r4,#0x14]      ;504
000110  6188              STR      r0,[r1,#0x18]         ;504
                  |L4.274|
000112  4813              LDR      r0,|L4.352|
000114  6800              LDR      r0,[r0,#0]            ;506  ; OSTCBFreeList
000116  6160              STR      r0,[r4,#0x14]         ;506
000118  4811              LDR      r0,|L4.352|
00011a  6004              STR      r4,[r0,#0]            ;507  ; OSTCBFreeList
00011c  203f              MOVS     r0,#0x3f              ;509
00011e  f884004c          STRB     r0,[r4,#0x4c]         ;509
000122  2100              MOVS     r1,#0                 ;510
000124  204d              MOVS     r0,#0x4d              ;510
000126  5501              STRB     r1,[r0,r4]            ;510
000128  4638              MOV      r0,r7                 ;512
00012a  f7fffffe          BL       OS_CPU_SR_Restore
00012e  480d              LDR      r0,|L4.356|
000130  7800              LDRB     r0,[r0,#0]            ;513  ; OSRunning
000132  2801              CMP      r0,#1                 ;513
000134  d101              BNE      |L4.314|
000136  f7fffffe          BL       OS_Sched
                  |L4.314|
00013a  2000              MOVS     r0,#0                 ;516
00013c  e769              B        |L4.18|
;;;518    #endif
                          ENDP

00013e  0000              DCW      0x0000
                  |L4.320|
                          DCD      OSIntNesting
                  |L4.324|
                          DCD      OSTCBCur
                  |L4.328|
                          DCD      OSTCBPrioTbl
                  |L4.332|
                          DCD      OSRdyTbl
                  |L4.336|
                          DCD      OSRdyGrp
                  |L4.340|
                          DCD      OSLockNesting
                  |L4.344|
                          DCD      OSTaskCtr
                  |L4.348|
                          DCD      OSTCBList
                  |L4.352|
                          DCD      OSTCBFreeList
                  |L4.356|
                          DCD      OSRunning

                          AREA ||i.OSTaskDelReq||, CODE, READONLY, ALIGN=2

                  OSTaskDelReq PROC
;;;566    #if OS_TASK_DEL_EN > 0
;;;567    INT8U  OSTaskDelReq (INT8U prio)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;568    {
000004  4604              MOV      r4,r0
;;;569        INT8U      stat;
;;;570        OS_TCB    *ptcb;
;;;571    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;572        OS_CPU_SR  cpu_sr = 0;
000006  2700              MOVS     r7,#0
;;;573    #endif
;;;574    
;;;575    
;;;576    
;;;577        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
000008  2c1f              CMP      r4,#0x1f
00000a  d102              BNE      |L5.18|
;;;578            return (OS_ERR_TASK_DEL_IDLE);
00000c  203e              MOVS     r0,#0x3e
                  |L5.14|
;;;579        }
;;;580    #if OS_ARG_CHK_EN > 0
;;;581        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
;;;582            if (prio != OS_PRIO_SELF) {
;;;583                return (OS_ERR_PRIO_INVALID);
;;;584            }
;;;585        }
;;;586    #endif
;;;587        if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
;;;588            OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
;;;589            stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
;;;590            OS_EXIT_CRITICAL();
;;;591            return (stat);
;;;592        }
;;;593        OS_ENTER_CRITICAL();
;;;594        ptcb = OSTCBPrioTbl[prio];
;;;595        if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
;;;596            OS_EXIT_CRITICAL();
;;;597            return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
;;;598        }
;;;599        if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
;;;600            OS_EXIT_CRITICAL();
;;;601            return (OS_ERR_TASK_DEL);
;;;602        }
;;;603        ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
;;;604        OS_EXIT_CRITICAL();
;;;605        return (OS_ERR_NONE);
;;;606    }
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L5.18|
000012  2cff              CMP      r4,#0xff              ;587
000014  d10b              BNE      |L5.46|
000016  f7fffffe          BL       OS_CPU_SR_Save
00001a  4607              MOV      r7,r0                 ;588
00001c  4811              LDR      r0,|L5.100|
00001e  6800              LDR      r0,[r0,#0]            ;589  ; OSTCBCur
000020  f8906037          LDRB     r6,[r0,#0x37]         ;589
000024  4638              MOV      r0,r7                 ;590
000026  f7fffffe          BL       OS_CPU_SR_Restore
00002a  4630              MOV      r0,r6                 ;591
00002c  e7ef              B        |L5.14|
                  |L5.46|
00002e  f7fffffe          BL       OS_CPU_SR_Save
000032  4607              MOV      r7,r0                 ;593
000034  480c              LDR      r0,|L5.104|
000036  f8505024          LDR      r5,[r0,r4,LSL #2]     ;594
00003a  b925              CBNZ     r5,|L5.70|
00003c  4638              MOV      r0,r7                 ;596
00003e  f7fffffe          BL       OS_CPU_SR_Restore
000042  2043              MOVS     r0,#0x43              ;597
000044  e7e3              B        |L5.14|
                  |L5.70|
000046  2d01              CMP      r5,#1                 ;599
000048  d104              BNE      |L5.84|
00004a  4638              MOV      r0,r7                 ;600
00004c  f7fffffe          BL       OS_CPU_SR_Restore
000050  203d              MOVS     r0,#0x3d              ;601
000052  e7dc              B        |L5.14|
                  |L5.84|
000054  203f              MOVS     r0,#0x3f              ;603
000056  f8850037          STRB     r0,[r5,#0x37]         ;603
00005a  4638              MOV      r0,r7                 ;604
00005c  f7fffffe          BL       OS_CPU_SR_Restore
000060  2000              MOVS     r0,#0                 ;605
000062  e7d4              B        |L5.14|
;;;607    #endif
                          ENDP

                  |L5.100|
                          DCD      OSTCBCur
                  |L5.104|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskNameGet||, CODE, READONLY, ALIGN=2

                  OSTaskNameGet PROC
;;;634    #if OS_TASK_NAME_SIZE > 1
;;;635    INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;636    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;637        OS_TCB    *ptcb;
;;;638        INT8U      len;
;;;639    #if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
;;;640        OS_CPU_SR  cpu_sr = 0;
00000a  f04f0800          MOV      r8,#0
;;;641    #endif
;;;642    
;;;643    
;;;644    
;;;645    #if OS_ARG_CHK_EN > 0
;;;646        if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
;;;647            return (0);
;;;648        }
;;;649        if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
;;;650            if (prio != OS_PRIO_SELF) {
;;;651                *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
;;;652                return (0);
;;;653            }
;;;654        }
;;;655        if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
;;;656            *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
;;;657            return (0);
;;;658        }
;;;659    #endif
;;;660        if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
00000e  4819              LDR      r0,|L6.116|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000012  2800              CMP      r0,#0
000014  dd04              BLE      |L6.32|
;;;661            *perr = OS_ERR_NAME_GET_ISR;
000016  2011              MOVS     r0,#0x11
000018  7020              STRB     r0,[r4,#0]
;;;662            return (0);
00001a  2000              MOVS     r0,#0
                  |L6.28|
;;;663        }
;;;664        OS_ENTER_CRITICAL();
;;;665        if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
;;;666            prio = OSTCBCur->OSTCBPrio;
;;;667        }
;;;668        ptcb = OSTCBPrioTbl[prio];
;;;669        if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
;;;670            OS_EXIT_CRITICAL();                              /* No                                         */
;;;671            *perr = OS_ERR_TASK_NOT_EXIST;
;;;672            return (0);
;;;673        }
;;;674        if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
;;;675            OS_EXIT_CRITICAL();                              /* Yes                                        */
;;;676            *perr = OS_ERR_TASK_NOT_EXIST;
;;;677            return (0);
;;;678        }
;;;679        len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
;;;680        OS_EXIT_CRITICAL();
;;;681        *perr = OS_ERR_NONE;
;;;682        return (len);
;;;683    }
00001c  e8bd87f0          POP      {r4-r10,pc}
                  |L6.32|
000020  f7fffffe          BL       OS_CPU_SR_Save
000024  4680              MOV      r8,r0                 ;664
000026  2eff              CMP      r6,#0xff              ;665
000028  d103              BNE      |L6.50|
00002a  4813              LDR      r0,|L6.120|
00002c  6800              LDR      r0,[r0,#0]            ;666  ; OSTCBCur
00002e  f8906032          LDRB     r6,[r0,#0x32]         ;666
                  |L6.50|
000032  4812              LDR      r0,|L6.124|
000034  f8505026          LDR      r5,[r0,r6,LSL #2]     ;668
000038  b935              CBNZ     r5,|L6.72|
00003a  4640              MOV      r0,r8                 ;670
00003c  f7fffffe          BL       OS_CPU_SR_Restore
000040  2043              MOVS     r0,#0x43              ;671
000042  7020              STRB     r0,[r4,#0]            ;671
000044  2000              MOVS     r0,#0                 ;672
000046  e7e9              B        |L6.28|
                  |L6.72|
000048  2d01              CMP      r5,#1                 ;674
00004a  d106              BNE      |L6.90|
00004c  4640              MOV      r0,r8                 ;675
00004e  f7fffffe          BL       OS_CPU_SR_Restore
000052  2043              MOVS     r0,#0x43              ;676
000054  7020              STRB     r0,[r4,#0]            ;676
000056  2000              MOVS     r0,#0                 ;677
000058  e7e0              B        |L6.28|
                  |L6.90|
00005a  f105014c          ADD      r1,r5,#0x4c           ;679
00005e  4638              MOV      r0,r7                 ;679
000060  f7fffffe          BL       OS_StrCopy
000064  4681              MOV      r9,r0                 ;679
000066  4640              MOV      r0,r8                 ;680
000068  f7fffffe          BL       OS_CPU_SR_Restore
00006c  2000              MOVS     r0,#0                 ;681
00006e  7020              STRB     r0,[r4,#0]            ;681
000070  4648              MOV      r0,r9                 ;682
000072  e7d3              B        |L6.28|
;;;684    #endif
                          ENDP

                  |L6.116|
                          DCD      OSIntNesting
                  |L6.120|
                          DCD      OSTCBCur
                  |L6.124|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskNameSet||, CODE, READONLY, ALIGN=2

                  OSTaskNameSet PROC
;;;713    #if OS_TASK_NAME_SIZE > 1
;;;714    void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;715    {
000004  4606              MOV      r6,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
;;;716        INT8U      len;
;;;717        OS_TCB    *ptcb;
;;;718    #if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
;;;719        OS_CPU_SR  cpu_sr = 0;
00000a  f04f0900          MOV      r9,#0
;;;720    #endif
;;;721    
;;;722    
;;;723    
;;;724    #if OS_ARG_CHK_EN > 0
;;;725        if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
;;;726            return;
;;;727        }
;;;728        if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
;;;729            if (prio != OS_PRIO_SELF) {
;;;730                *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
;;;731                return;
;;;732            }
;;;733        }
;;;734        if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
;;;735            *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
;;;736            return;
;;;737        }
;;;738    #endif
;;;739        if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
00000e  481d              LDR      r0,|L7.132|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000012  2800              CMP      r0,#0
000014  dd03              BLE      |L7.30|
;;;740            *perr = OS_ERR_NAME_SET_ISR;
000016  2012              MOVS     r0,#0x12
000018  7020              STRB     r0,[r4,#0]
                  |L7.26|
;;;741            return;
;;;742        }
;;;743        OS_ENTER_CRITICAL();
;;;744        if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
;;;745            prio = OSTCBCur->OSTCBPrio;
;;;746        }
;;;747        ptcb = OSTCBPrioTbl[prio];
;;;748        if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
;;;749            OS_EXIT_CRITICAL();                          /* No                                             */
;;;750            *perr = OS_ERR_TASK_NOT_EXIST;
;;;751            return;
;;;752        }
;;;753        if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
;;;754            OS_EXIT_CRITICAL();                          /* Yes                                            */
;;;755            *perr = OS_ERR_TASK_NOT_EXIST;
;;;756            return;
;;;757        }
;;;758        len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
;;;759        if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
;;;760            OS_EXIT_CRITICAL();
;;;761            *perr = OS_ERR_TASK_NAME_TOO_LONG;
;;;762            return;
;;;763        }
;;;764        (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
;;;765        OS_EXIT_CRITICAL();
;;;766        *perr = OS_ERR_NONE;
;;;767    }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L7.30|
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4681              MOV      r9,r0                 ;743
000024  2eff              CMP      r6,#0xff              ;744
000026  d103              BNE      |L7.48|
000028  4817              LDR      r0,|L7.136|
00002a  6800              LDR      r0,[r0,#0]            ;745  ; OSTCBCur
00002c  f8906032          LDRB     r6,[r0,#0x32]         ;745
                  |L7.48|
000030  4816              LDR      r0,|L7.140|
000032  f8505026          LDR      r5,[r0,r6,LSL #2]     ;747
000036  b92d              CBNZ     r5,|L7.68|
000038  4648              MOV      r0,r9                 ;749
00003a  f7fffffe          BL       OS_CPU_SR_Restore
00003e  2043              MOVS     r0,#0x43              ;750
000040  7020              STRB     r0,[r4,#0]            ;750
000042  e7ea              B        |L7.26|
                  |L7.68|
000044  2d01              CMP      r5,#1                 ;753
000046  d105              BNE      |L7.84|
000048  4648              MOV      r0,r9                 ;754
00004a  f7fffffe          BL       OS_CPU_SR_Restore
00004e  2043              MOVS     r0,#0x43              ;755
000050  7020              STRB     r0,[r4,#0]            ;755
000052  e7e2              B        |L7.26|
                  |L7.84|
000054  4640              MOV      r0,r8                 ;758
000056  f7fffffe          BL       OS_StrLen
00005a  4607              MOV      r7,r0                 ;758
00005c  2f0f              CMP      r7,#0xf               ;759
00005e  dd05              BLE      |L7.108|
000060  4648              MOV      r0,r9                 ;760
000062  f7fffffe          BL       OS_CPU_SR_Restore
000066  2041              MOVS     r0,#0x41              ;761
000068  7020              STRB     r0,[r4,#0]            ;761
00006a  e7d6              B        |L7.26|
                  |L7.108|
00006c  4641              MOV      r1,r8                 ;764
00006e  f105004c          ADD      r0,r5,#0x4c           ;764
000072  f7fffffe          BL       OS_StrCopy
000076  4648              MOV      r0,r9                 ;765
000078  f7fffffe          BL       OS_CPU_SR_Restore
00007c  2000              MOVS     r0,#0                 ;766
00007e  7020              STRB     r0,[r4,#0]            ;766
000080  bf00              NOP      
000082  e7ca              B        |L7.26|
;;;768    #endif
                          ENDP

                  |L7.132|
                          DCD      OSIntNesting
                  |L7.136|
                          DCD      OSTCBCur
                  |L7.140|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskQuery||, CODE, READONLY, ALIGN=2

                  OSTaskQuery PROC
;;;1013   #if OS_TASK_QUERY_EN > 0
;;;1014   INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1015   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;1016       OS_TCB    *ptcb;
;;;1017   #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;1018       OS_CPU_SR  cpu_sr = 0;
000008  2700              MOVS     r7,#0
;;;1019   #endif
;;;1020   
;;;1021   
;;;1022   
;;;1023   #if OS_ARG_CHK_EN > 0
;;;1024       if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
;;;1025           if (prio != OS_PRIO_SELF) {
;;;1026               return (OS_ERR_PRIO_INVALID);
;;;1027           }
;;;1028       }
;;;1029       if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
;;;1030           return (OS_ERR_PDATA_NULL);
;;;1031       }
;;;1032   #endif
;;;1033       OS_ENTER_CRITICAL();
00000a  f7fffffe          BL       OS_CPU_SR_Save
00000e  4607              MOV      r7,r0
;;;1034       if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
000010  2dff              CMP      r5,#0xff
000012  d103              BNE      |L8.28|
;;;1035           prio = OSTCBCur->OSTCBPrio;
000014  480f              LDR      r0,|L8.84|
000016  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000018  f8905032          LDRB     r5,[r0,#0x32]
                  |L8.28|
;;;1036       }
;;;1037       ptcb = OSTCBPrioTbl[prio];
00001c  480e              LDR      r0,|L8.88|
00001e  f8504025          LDR      r4,[r0,r5,LSL #2]
;;;1038       if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
000022  b92c              CBNZ     r4,|L8.48|
;;;1039           OS_EXIT_CRITICAL();
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       OS_CPU_SR_Restore
;;;1040           return (OS_ERR_PRIO);
00002a  2029              MOVS     r0,#0x29
                  |L8.44|
;;;1041       }
;;;1042       if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
;;;1043           OS_EXIT_CRITICAL();
;;;1044           return (OS_ERR_TASK_NOT_EXIST);
;;;1045       }
;;;1046                                                    /* Copy TCB into user storage area                    */
;;;1047       OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
;;;1048       OS_EXIT_CRITICAL();
;;;1049       return (OS_ERR_NONE);
;;;1050   }
00002c  e8bd81f0          POP      {r4-r8,pc}
                  |L8.48|
000030  2c01              CMP      r4,#1                 ;1042
000032  d104              BNE      |L8.62|
000034  4638              MOV      r0,r7                 ;1043
000036  f7fffffe          BL       OS_CPU_SR_Restore
00003a  2043              MOVS     r0,#0x43              ;1044
00003c  e7f6              B        |L8.44|
                  |L8.62|
00003e  225c              MOVS     r2,#0x5c              ;1047
000040  4621              MOV      r1,r4                 ;1047
000042  4630              MOV      r0,r6                 ;1047
000044  f7fffffe          BL       OS_MemCopy
000048  4638              MOV      r0,r7                 ;1048
00004a  f7fffffe          BL       OS_CPU_SR_Restore
00004e  2000              MOVS     r0,#0                 ;1049
000050  e7ec              B        |L8.44|
;;;1051   #endif
                          ENDP

000052  0000              DCW      0x0000
                  |L8.84|
                          DCD      OSTCBCur
                  |L8.88|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskResume||, CODE, READONLY, ALIGN=2

                  OSTaskResume PROC
;;;789    #if OS_TASK_SUSPEND_EN > 0
;;;790    INT8U  OSTaskResume (INT8U prio)
000000  b570              PUSH     {r4-r6,lr}
;;;791    {
000002  4605              MOV      r5,r0
;;;792        OS_TCB    *ptcb;
;;;793    #if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
;;;794        OS_CPU_SR  cpu_sr = 0;
000004  2600              MOVS     r6,#0
;;;795    #endif
;;;796    
;;;797    
;;;798    
;;;799    #if OS_ARG_CHK_EN > 0
;;;800        if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
;;;801            return (OS_ERR_PRIO_INVALID);
;;;802        }
;;;803    #endif
;;;804        OS_ENTER_CRITICAL();
000006  f7fffffe          BL       OS_CPU_SR_Save
00000a  4606              MOV      r6,r0
;;;805        ptcb = OSTCBPrioTbl[prio];
00000c  4823              LDR      r0,|L9.156|
00000e  f8504025          LDR      r4,[r0,r5,LSL #2]
;;;806        if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
000012  b924              CBNZ     r4,|L9.30|
;;;807            OS_EXIT_CRITICAL();
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       OS_CPU_SR_Restore
;;;808            return (OS_ERR_TASK_RESUME_PRIO);
00001a  2046              MOVS     r0,#0x46
                  |L9.28|
;;;809        }
;;;810        if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
;;;811            OS_EXIT_CRITICAL();
;;;812            return (OS_ERR_TASK_NOT_EXIST);
;;;813        }
;;;814        if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
;;;815            ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
;;;816            if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
;;;817                if (ptcb->OSTCBDly == 0) {
;;;818                    OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
;;;819                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;820                    OS_EXIT_CRITICAL();
;;;821                    if (OSRunning == OS_TRUE) {
;;;822                        OS_Sched();                               /* Find new highest priority task        */
;;;823                    }
;;;824                } else {
;;;825                    OS_EXIT_CRITICAL();
;;;826                }
;;;827            } else {                                              /* Must be pending on event              */
;;;828                OS_EXIT_CRITICAL();
;;;829            }
;;;830            return (OS_ERR_NONE);
;;;831        }
;;;832        OS_EXIT_CRITICAL();
;;;833        return (OS_ERR_TASK_NOT_SUSPENDED);
;;;834    }
00001c  bd70              POP      {r4-r6,pc}
                  |L9.30|
00001e  2c01              CMP      r4,#1                 ;810
000020  d104              BNE      |L9.44|
000022  4630              MOV      r0,r6                 ;811
000024  f7fffffe          BL       OS_CPU_SR_Restore
000028  2043              MOVS     r0,#0x43              ;812
00002a  e7f7              B        |L9.28|
                  |L9.44|
00002c  f8940030          LDRB     r0,[r4,#0x30]         ;814
000030  f0000008          AND      r0,r0,#8              ;814
000034  b360              CBZ      r0,|L9.144|
000036  f8140f30          LDRB     r0,[r4,#0x30]!        ;815
00003a  f0200008          BIC      r0,r0,#8              ;815
00003e  7020              STRB     r0,[r4,#0]            ;815
000040  f8140930          LDRB     r0,[r4],#-0x30        ;816
000044  b9f8              CBNZ     r0,|L9.134|
000046  8de0              LDRH     r0,[r4,#0x2e]         ;817
000048  b9c8              CBNZ     r0,|L9.126|
00004a  3434              ADDS     r4,r4,#0x34           ;818
00004c  78a0              LDRB     r0,[r4,#2]            ;818
00004e  4914              LDR      r1,|L9.160|
000050  7809              LDRB     r1,[r1,#0]            ;818  ; OSRdyGrp
000052  4308              ORRS     r0,r0,r1              ;818
000054  4912              LDR      r1,|L9.160|
000056  7008              STRB     r0,[r1,#0]            ;818
000058  7820              LDRB     r0,[r4,#0]            ;819
00005a  4912              LDR      r1,|L9.164|
00005c  5c08              LDRB     r0,[r1,r0]            ;819
00005e  7861              LDRB     r1,[r4,#1]            ;819
000060  4308              ORRS     r0,r0,r1              ;819
000062  f8141934          LDRB     r1,[r4],#-0x34        ;819
000066  4a0f              LDR      r2,|L9.164|
000068  5450              STRB     r0,[r2,r1]            ;819
00006a  4630              MOV      r0,r6                 ;820
00006c  f7fffffe          BL       OS_CPU_SR_Restore
000070  480d              LDR      r0,|L9.168|
000072  7800              LDRB     r0,[r0,#0]            ;821  ; OSRunning
000074  2801              CMP      r0,#1                 ;821
000076  d109              BNE      |L9.140|
000078  f7fffffe          BL       OS_Sched
00007c  e006              B        |L9.140|
                  |L9.126|
00007e  4630              MOV      r0,r6                 ;825
000080  f7fffffe          BL       OS_CPU_SR_Restore
000084  e002              B        |L9.140|
                  |L9.134|
000086  4630              MOV      r0,r6                 ;828
000088  f7fffffe          BL       OS_CPU_SR_Restore
                  |L9.140|
00008c  2000              MOVS     r0,#0                 ;830
00008e  e7c5              B        |L9.28|
                  |L9.144|
000090  4630              MOV      r0,r6                 ;832
000092  f7fffffe          BL       OS_CPU_SR_Restore
000096  2044              MOVS     r0,#0x44              ;833
000098  e7c0              B        |L9.28|
;;;835    #endif
                          ENDP

00009a  0000              DCW      0x0000
                  |L9.156|
                          DCD      OSTCBPrioTbl
                  |L9.160|
                          DCD      OSRdyGrp
                  |L9.164|
                          DCD      OSRdyTbl
                  |L9.168|
                          DCD      OSRunning

                          AREA ||i.OSTaskStkChk||, CODE, READONLY, ALIGN=2

                  OSTaskStkChk PROC
;;;856    #if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
;;;857    INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;858    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;859        OS_TCB    *ptcb;
;;;860        OS_STK    *pchk;
;;;861        INT32U     nfree;
;;;862        INT32U     size;
;;;863    #if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
;;;864        OS_CPU_SR  cpu_sr = 0;
000008  f04f0a00          MOV      r10,#0
;;;865    #endif
;;;866    
;;;867    
;;;868    
;;;869    #if OS_ARG_CHK_EN > 0
;;;870        if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
;;;871            if (prio != OS_PRIO_SELF) {
;;;872                return (OS_ERR_PRIO_INVALID);
;;;873            }
;;;874        }
;;;875        if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
;;;876            return (OS_ERR_PDATA_NULL);
;;;877        }
;;;878    #endif
;;;879        p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
00000c  2000              MOVS     r0,#0
00000e  6028              STR      r0,[r5,#0]
;;;880        p_stk_data->OSUsed = 0;
000010  6068              STR      r0,[r5,#4]
;;;881        OS_ENTER_CRITICAL();
000012  f7fffffe          BL       OS_CPU_SR_Save
000016  4682              MOV      r10,r0
;;;882        if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
000018  2fff              CMP      r7,#0xff
00001a  d103              BNE      |L10.36|
;;;883            prio = OSTCBCur->OSTCBPrio;
00001c  4819              LDR      r0,|L10.132|
00001e  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000020  f8907032          LDRB     r7,[r0,#0x32]
                  |L10.36|
;;;884        }
;;;885        ptcb = OSTCBPrioTbl[prio];
000024  4818              LDR      r0,|L10.136|
000026  f8504027          LDR      r4,[r0,r7,LSL #2]
;;;886        if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
00002a  b92c              CBNZ     r4,|L10.56|
;;;887            OS_EXIT_CRITICAL();
00002c  4650              MOV      r0,r10
00002e  f7fffffe          BL       OS_CPU_SR_Restore
;;;888            return (OS_ERR_TASK_NOT_EXIST);
000032  2043              MOVS     r0,#0x43
                  |L10.52|
;;;889        }
;;;890        if (ptcb == OS_TCB_RESERVED) {
;;;891            OS_EXIT_CRITICAL();
;;;892            return (OS_ERR_TASK_NOT_EXIST);
;;;893        }
;;;894        if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
;;;895            OS_EXIT_CRITICAL();
;;;896            return (OS_ERR_TASK_OPT);
;;;897        }
;;;898        nfree = 0;
;;;899        size  = ptcb->OSTCBStkSize;
;;;900        pchk  = ptcb->OSTCBStkBottom;
;;;901        OS_EXIT_CRITICAL();
;;;902    #if OS_STK_GROWTH == 1
;;;903        while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
;;;904            nfree++;
;;;905        }
;;;906    #else
;;;907        while (*pchk-- == (OS_STK)0) {
;;;908            nfree++;
;;;909        }
;;;910    #endif
;;;911        p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
;;;912        p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
;;;913        return (OS_ERR_NONE);
;;;914    }
000034  e8bd87f0          POP      {r4-r10,pc}
                  |L10.56|
000038  2c01              CMP      r4,#1                 ;890
00003a  d104              BNE      |L10.70|
00003c  4650              MOV      r0,r10                ;891
00003e  f7fffffe          BL       OS_CPU_SR_Restore
000042  2043              MOVS     r0,#0x43              ;892
000044  e7f6              B        |L10.52|
                  |L10.70|
000046  7c20              LDRB     r0,[r4,#0x10]         ;894
000048  f0000001          AND      r0,r0,#1              ;894
00004c  b920              CBNZ     r0,|L10.88|
00004e  4650              MOV      r0,r10                ;895
000050  f7fffffe          BL       OS_CPU_SR_Restore
000054  2045              MOVS     r0,#0x45              ;896
000056  e7ed              B        |L10.52|
                  |L10.88|
000058  2600              MOVS     r6,#0                 ;898
00005a  f8d4900c          LDR      r9,[r4,#0xc]          ;899
00005e  f8d48008          LDR      r8,[r4,#8]            ;900
000062  4650              MOV      r0,r10                ;901
000064  f7fffffe          BL       OS_CPU_SR_Restore
000068  e000              B        |L10.108|
                  |L10.106|
00006a  1c76              ADDS     r6,r6,#1              ;904
                  |L10.108|
00006c  f8581b04          LDR      r1,[r8],#4            ;903
000070  2900              CMP      r1,#0                 ;903
000072  d0fa              BEQ      |L10.106|
000074  00b0              LSLS     r0,r6,#2              ;911
000076  6028              STR      r0,[r5,#0]            ;911
000078  eba90006          SUB      r0,r9,r6              ;912
00007c  0080              LSLS     r0,r0,#2              ;912
00007e  6068              STR      r0,[r5,#4]            ;912
000080  2000              MOVS     r0,#0                 ;913
000082  e7d7              B        |L10.52|
;;;915    #endif
                          ENDP

                  |L10.132|
                          DCD      OSTCBCur
                  |L10.136|
                          DCD      OSTCBPrioTbl

                          AREA ||i.OSTaskSuspend||, CODE, READONLY, ALIGN=2

                  OSTaskSuspend PROC
;;;940    #if OS_TASK_SUSPEND_EN > 0
;;;941    INT8U  OSTaskSuspend (INT8U prio)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;942    {
000004  4605              MOV      r5,r0
;;;943        BOOLEAN    self;
;;;944        OS_TCB    *ptcb;
;;;945        INT8U      y;
;;;946    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;947        OS_CPU_SR  cpu_sr = 0;
000006  f04f0800          MOV      r8,#0
;;;948    #endif
;;;949    
;;;950    
;;;951    
;;;952    #if OS_ARG_CHK_EN > 0
;;;953        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
;;;954            return (OS_ERR_TASK_SUSPEND_IDLE);
;;;955        }
;;;956        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
;;;957            if (prio != OS_PRIO_SELF) {
;;;958                return (OS_ERR_PRIO_INVALID);
;;;959            }
;;;960        }
;;;961    #endif
;;;962        OS_ENTER_CRITICAL();
00000a  f7fffffe          BL       OS_CPU_SR_Save
00000e  4680              MOV      r8,r0
;;;963        if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
000010  2dff              CMP      r5,#0xff
000012  d105              BNE      |L11.32|
;;;964            prio = OSTCBCur->OSTCBPrio;
000014  4820              LDR      r0,|L11.152|
000016  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000018  f8905032          LDRB     r5,[r0,#0x32]
;;;965            self = OS_TRUE;
00001c  2601              MOVS     r6,#1
00001e  e008              B        |L11.50|
                  |L11.32|
;;;966        } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
000020  481d              LDR      r0,|L11.152|
000022  6800              LDR      r0,[r0,#0]  ; OSTCBCur
000024  f8900032          LDRB     r0,[r0,#0x32]
000028  42a8              CMP      r0,r5
00002a  d101              BNE      |L11.48|
;;;967            self = OS_TRUE;
00002c  2601              MOVS     r6,#1
00002e  e000              B        |L11.50|
                  |L11.48|
;;;968        } else {
;;;969            self = OS_FALSE;                                        /* No suspending another task          */
000030  2600              MOVS     r6,#0
                  |L11.50|
;;;970        }
;;;971        ptcb = OSTCBPrioTbl[prio];
000032  481a              LDR      r0,|L11.156|
000034  f8504025          LDR      r4,[r0,r5,LSL #2]
;;;972        if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
000038  b92c              CBNZ     r4,|L11.70|
;;;973            OS_EXIT_CRITICAL();
00003a  4640              MOV      r0,r8
00003c  f7fffffe          BL       OS_CPU_SR_Restore
;;;974            return (OS_ERR_TASK_SUSPEND_PRIO);
000040  2048              MOVS     r0,#0x48
                  |L11.66|
;;;975        }
;;;976        if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
;;;977            OS_EXIT_CRITICAL();
;;;978            return (OS_ERR_TASK_NOT_EXIST);
;;;979        }
;;;980        y            = ptcb->OSTCBY;
;;;981        OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
;;;982        if (OSRdyTbl[y] == 0) {
;;;983            OSRdyGrp &= ~ptcb->OSTCBBitY;
;;;984        }
;;;985        ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
;;;986        OS_EXIT_CRITICAL();
;;;987        if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
;;;988            OS_Sched();                                             /* Find new highest priority task      */
;;;989        }
;;;990        return (OS_ERR_NONE);
;;;991    }
000042  e8bd81f0          POP      {r4-r8,pc}
                  |L11.70|
000046  2c01              CMP      r4,#1                 ;976
000048  d104              BNE      |L11.84|
00004a  4640              MOV      r0,r8                 ;977
00004c  f7fffffe          BL       OS_CPU_SR_Restore
000050  2043              MOVS     r0,#0x43              ;978
000052  e7f6              B        |L11.66|
                  |L11.84|
000054  f8947034          LDRB     r7,[r4,#0x34]         ;980
000058  4811              LDR      r0,|L11.160|
00005a  5dc0              LDRB     r0,[r0,r7]            ;981
00005c  f8941035          LDRB     r1,[r4,#0x35]         ;981
000060  4388              BICS     r0,r0,r1              ;981
000062  490f              LDR      r1,|L11.160|
000064  55c8              STRB     r0,[r1,r7]            ;981
000066  4608              MOV      r0,r1                 ;982
000068  5dc0              LDRB     r0,[r0,r7]            ;982
00006a  b930              CBNZ     r0,|L11.122|
00006c  f8941036          LDRB     r1,[r4,#0x36]         ;983
000070  480c              LDR      r0,|L11.164|
000072  7800              LDRB     r0,[r0,#0]            ;983  ; OSRdyGrp
000074  4388              BICS     r0,r0,r1              ;983
000076  490b              LDR      r1,|L11.164|
000078  7008              STRB     r0,[r1,#0]            ;983
                  |L11.122|
00007a  f8940030          LDRB     r0,[r4,#0x30]         ;985
00007e  f0400008          ORR      r0,r0,#8              ;985
000082  f8840030          STRB     r0,[r4,#0x30]         ;985
000086  4640              MOV      r0,r8                 ;986
000088  f7fffffe          BL       OS_CPU_SR_Restore
00008c  2e01              CMP      r6,#1                 ;987
00008e  d101              BNE      |L11.148|
000090  f7fffffe          BL       OS_Sched
                  |L11.148|
000094  2000              MOVS     r0,#0                 ;990
000096  e7d4              B        |L11.66|
;;;992    #endif
                          ENDP

                  |L11.152|
                          DCD      OSTCBCur
                  |L11.156|
                          DCD      OSTCBPrioTbl
                  |L11.160|
                          DCD      OSRdyTbl
                  |L11.164|
                          DCD      OSRdyGrp

                          AREA ||i.OS_TaskStkClr||, CODE, READONLY, ALIGN=1

                  OS_TaskStkClr PROC
;;;1075   #if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
;;;1076   void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
000000  f0020301          AND      r3,r2,#1
;;;1077   {
;;;1078       if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
000004  b143              CBZ      r3,|L12.24|
;;;1079           if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
000006  f0020302          AND      r3,r2,#2
00000a  b12b              CBZ      r3,|L12.24|
;;;1080   #if OS_STK_GROWTH == 1
;;;1081               while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
00000c  e002              B        |L12.20|
                  |L12.14|
;;;1082                   size--;
00000e  1e49              SUBS     r1,r1,#1
;;;1083                   *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
000010  2300              MOVS     r3,#0
000012  c008              STM      r0!,{r3}
                  |L12.20|
000014  2900              CMP      r1,#0                 ;1081
000016  d1fa              BNE      |L12.14|
                  |L12.24|
;;;1084               }
;;;1085   #else
;;;1086               while (size > 0) {                         /* Stack grows from LOW to HIGH memory          */
;;;1087                   size--;
;;;1088                   *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
;;;1089               }
;;;1090   #endif
;;;1091           }
;;;1092       }
;;;1093   }
000018  4770              BX       lr
;;;1094   
                          ENDP

