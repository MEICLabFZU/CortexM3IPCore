; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\os_flag.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\os_flag.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\include -I.\TTS -I.\OLED -I.\ucosii\config -I.\ucosii\port -I.\ucosii\source -I.\RTE\_Target_1 -ID:\Coding\MDKeil\ARM\PACK\ARM\CMSIS\5.4.0\Device\ARM\ARMCM3\Include -ID:\Coding\MDKeil\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DARMCM3 --omf_browse=.\objects\os_flag.crf ucosii\source\os_flag.c]
                          THUMB

                          AREA ||i.OSFlagAccept||, CODE, READONLY, ALIGN=1

                  OSFlagAccept PROC
;;;91     #if OS_FLAG_ACCEPT_EN > 0
;;;92     OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;93     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4691              MOV      r9,r2
00000a  461e              MOV      r6,r3
;;;94         OS_FLAGS      flags_rdy;
;;;95         INT8U         result;
;;;96         BOOLEAN       consume;
;;;97     #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;98         OS_CPU_SR     cpu_sr = 0;
00000c  f04f0b00          MOV      r11,#0
;;;99     #endif
;;;100    
;;;101    
;;;102    
;;;103    #if OS_ARG_CHK_EN > 0
;;;104        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
;;;105            return ((OS_FLAGS)0);
;;;106        }
;;;107        if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
;;;108            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;109            return ((OS_FLAGS)0);
;;;110        }
;;;111    #endif
;;;112        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
000010  7820              LDRB     r0,[r4,#0]
000012  2805              CMP      r0,#5
000014  d004              BEQ      |L1.32|
;;;113            *perr = OS_ERR_EVENT_TYPE;
000016  2001              MOVS     r0,#1
000018  7030              STRB     r0,[r6,#0]
;;;114            return ((OS_FLAGS)0);
00001a  2000              MOVS     r0,#0
                  |L1.28|
;;;115        }
;;;116        result = (INT8U)(wait_type & OS_FLAG_CONSUME);
;;;117        if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
;;;118            wait_type &= ~OS_FLAG_CONSUME;
;;;119            consume    = OS_TRUE;
;;;120        } else {
;;;121            consume    = OS_FALSE;
;;;122        }
;;;123    /*$PAGE*/
;;;124        *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
;;;125        OS_ENTER_CRITICAL();
;;;126        switch (wait_type) {
;;;127            case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
;;;128                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
;;;129                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;130                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;131                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
;;;132                     }
;;;133                 } else {
;;;134                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;135                 }
;;;136                 OS_EXIT_CRITICAL();
;;;137                 break;
;;;138    
;;;139            case OS_FLAG_WAIT_SET_ANY:
;;;140                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
;;;141                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
;;;142                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;143                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
;;;144                     }
;;;145                 } else {
;;;146                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;147                 }
;;;148                 OS_EXIT_CRITICAL();
;;;149                 break;
;;;150    
;;;151    #if OS_FLAG_WAIT_CLR_EN > 0
;;;152            case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
;;;153                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
;;;154                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;155                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;156                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
;;;157                     }
;;;158                 } else {
;;;159                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;160                 }
;;;161                 OS_EXIT_CRITICAL();
;;;162                 break;
;;;163    
;;;164            case OS_FLAG_WAIT_CLR_ANY:
;;;165                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
;;;166                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
;;;167                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;168                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
;;;169                     }
;;;170                 } else {
;;;171                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;172                 }
;;;173                 OS_EXIT_CRITICAL();
;;;174                 break;
;;;175    #endif
;;;176    
;;;177            default:
;;;178                 OS_EXIT_CRITICAL();
;;;179                 flags_rdy = (OS_FLAGS)0;
;;;180                 *perr     = OS_ERR_FLAG_WAIT_TYPE;
;;;181                 break;
;;;182        }
;;;183        return (flags_rdy);
;;;184    }
00001c  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.32|
000020  f0090a80          AND      r10,r9,#0x80          ;116
000024  f1ba0f00          CMP      r10,#0                ;117
000028  d004              BEQ      |L1.52|
00002a  f0290980          BIC      r9,r9,#0x80           ;118
00002e  f04f0801          MOV      r8,#1                 ;119
000032  e001              B        |L1.56|
                  |L1.52|
000034  f04f0800          MOV      r8,#0                 ;121
                  |L1.56|
000038  2000              MOVS     r0,#0                 ;124
00003a  7030              STRB     r0,[r6,#0]            ;124
00003c  f7fffffe          BL       OS_CPU_SR_Save
000040  4683              MOV      r11,r0                ;125
000042  f1b90f00          CMP      r9,#0                 ;126
000046  d02c              BEQ      |L1.162|
000048  f1b90f01          CMP      r9,#1                 ;126
00004c  d03b              BEQ      |L1.198|
00004e  f1b90f02          CMP      r9,#2                 ;126
000052  d003              BEQ      |L1.92|
000054  f1b90f03          CMP      r9,#3                 ;126
000058  d146              BNE      |L1.232|
00005a  e011              B        |L1.128|
                  |L1.92|
00005c  8920              LDRH     r0,[r4,#8]            ;128
00005e  ea000507          AND      r5,r0,r7              ;128
000062  42bd              CMP      r5,r7                 ;129
000064  d106              BNE      |L1.116|
000066  f1b80f01          CMP      r8,#1                 ;130
00006a  d105              BNE      |L1.120|
00006c  8920              LDRH     r0,[r4,#8]            ;131
00006e  43a8              BICS     r0,r0,r5              ;131
000070  8120              STRH     r0,[r4,#8]            ;131
000072  e001              B        |L1.120|
                  |L1.116|
000074  2070              MOVS     r0,#0x70              ;134
000076  7030              STRB     r0,[r6,#0]            ;134
                  |L1.120|
000078  4658              MOV      r0,r11                ;136
00007a  f7fffffe          BL       OS_CPU_SR_Restore
00007e  e03a              B        |L1.246|
                  |L1.128|
000080  8920              LDRH     r0,[r4,#8]            ;140
000082  ea000507          AND      r5,r0,r7              ;140
000086  b135              CBZ      r5,|L1.150|
000088  f1b80f01          CMP      r8,#1                 ;142
00008c  d105              BNE      |L1.154|
00008e  8920              LDRH     r0,[r4,#8]            ;143
000090  43a8              BICS     r0,r0,r5              ;143
000092  8120              STRH     r0,[r4,#8]            ;143
000094  e001              B        |L1.154|
                  |L1.150|
000096  2070              MOVS     r0,#0x70              ;146
000098  7030              STRB     r0,[r6,#0]            ;146
                  |L1.154|
00009a  4658              MOV      r0,r11                ;148
00009c  f7fffffe          BL       OS_CPU_SR_Restore
0000a0  e029              B        |L1.246|
                  |L1.162|
0000a2  8920              LDRH     r0,[r4,#8]            ;153
0000a4  ea270500          BIC      r5,r7,r0              ;153
0000a8  42bd              CMP      r5,r7                 ;154
0000aa  d106              BNE      |L1.186|
0000ac  f1b80f01          CMP      r8,#1                 ;155
0000b0  d105              BNE      |L1.190|
0000b2  8920              LDRH     r0,[r4,#8]            ;156
0000b4  4328              ORRS     r0,r0,r5              ;156
0000b6  8120              STRH     r0,[r4,#8]            ;156
0000b8  e001              B        |L1.190|
                  |L1.186|
0000ba  2070              MOVS     r0,#0x70              ;159
0000bc  7030              STRB     r0,[r6,#0]            ;159
                  |L1.190|
0000be  4658              MOV      r0,r11                ;161
0000c0  f7fffffe          BL       OS_CPU_SR_Restore
0000c4  e017              B        |L1.246|
                  |L1.198|
0000c6  8920              LDRH     r0,[r4,#8]            ;165
0000c8  ea270500          BIC      r5,r7,r0              ;165
0000cc  b135              CBZ      r5,|L1.220|
0000ce  f1b80f01          CMP      r8,#1                 ;167
0000d2  d105              BNE      |L1.224|
0000d4  8920              LDRH     r0,[r4,#8]            ;168
0000d6  4328              ORRS     r0,r0,r5              ;168
0000d8  8120              STRH     r0,[r4,#8]            ;168
0000da  e001              B        |L1.224|
                  |L1.220|
0000dc  2070              MOVS     r0,#0x70              ;171
0000de  7030              STRB     r0,[r6,#0]            ;171
                  |L1.224|
0000e0  4658              MOV      r0,r11                ;173
0000e2  f7fffffe          BL       OS_CPU_SR_Restore
0000e6  e006              B        |L1.246|
                  |L1.232|
0000e8  4658              MOV      r0,r11                ;178
0000ea  f7fffffe          BL       OS_CPU_SR_Restore
0000ee  2500              MOVS     r5,#0                 ;179
0000f0  206f              MOVS     r0,#0x6f              ;180
0000f2  7030              STRB     r0,[r6,#0]            ;180
0000f4  bf00              NOP                            ;181
                  |L1.246|
0000f6  bf00              NOP                            ;137
0000f8  4628              MOV      r0,r5                 ;183
0000fa  e78f              B        |L1.28|
;;;185    #endif
                          ENDP


                          AREA ||i.OSFlagCreate||, CODE, READONLY, ALIGN=2

                  OSFlagCreate PROC
;;;207    
;;;208    OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;209    {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
;;;210        OS_FLAG_GRP *pgrp;
;;;211    #if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
;;;212        OS_CPU_SR    cpu_sr = 0;
000008  2700              MOVS     r7,#0
;;;213    #endif
;;;214    
;;;215    
;;;216    
;;;217    #if OS_ARG_CHK_EN > 0
;;;218        if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
;;;219            return ((OS_FLAG_GRP *)0);
;;;220        }
;;;221    #endif
;;;222        if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
00000a  4814              LDR      r0,|L2.92|
00000c  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000e  2800              CMP      r0,#0
000010  dd04              BLE      |L2.28|
;;;223            *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
000012  2010              MOVS     r0,#0x10
000014  7028              STRB     r0,[r5,#0]
;;;224            return ((OS_FLAG_GRP *)0);
000016  2000              MOVS     r0,#0
                  |L2.24|
;;;225        }
;;;226        OS_ENTER_CRITICAL();
;;;227        pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
;;;228        if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
;;;229                                                        /* Adjust free list                                */
;;;230            OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
;;;231            pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
;;;232            pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
;;;233            pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
;;;234    #if OS_FLAG_NAME_SIZE > 1
;;;235            pgrp->OSFlagName[0]  = '?';
;;;236            pgrp->OSFlagName[1]  = OS_ASCII_NUL;
;;;237    #endif
;;;238            OS_EXIT_CRITICAL();
;;;239            *perr                = OS_ERR_NONE;
;;;240        } else {
;;;241            OS_EXIT_CRITICAL();
;;;242            *perr                = OS_ERR_FLAG_GRP_DEPLETED;
;;;243        }
;;;244        return (pgrp);                                  /* Return pointer to event flag group              */
;;;245    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L2.28|
00001c  f7fffffe          BL       OS_CPU_SR_Save
000020  4607              MOV      r7,r0                 ;226
000022  480f              LDR      r0,|L2.96|
000024  6804              LDR      r4,[r0,#0]            ;227  ; OSFlagFreeList
000026  b194              CBZ      r4,|L2.78|
000028  6800              LDR      r0,[r0,#0]            ;230  ; OSFlagFreeList
00002a  6840              LDR      r0,[r0,#4]            ;230
00002c  490c              LDR      r1,|L2.96|
00002e  6008              STR      r0,[r1,#0]            ;230  ; OSFlagFreeList
000030  2005              MOVS     r0,#5                 ;231
000032  7020              STRB     r0,[r4,#0]            ;231
000034  8126              STRH     r6,[r4,#8]            ;232
000036  2000              MOVS     r0,#0                 ;233
000038  6060              STR      r0,[r4,#4]            ;233
00003a  203f              MOVS     r0,#0x3f              ;235
00003c  72a0              STRB     r0,[r4,#0xa]          ;235
00003e  2100              MOVS     r1,#0                 ;236
000040  72e1              STRB     r1,[r4,#0xb]          ;236
000042  4638              MOV      r0,r7                 ;238
000044  f7fffffe          BL       OS_CPU_SR_Restore
000048  2000              MOVS     r0,#0                 ;239
00004a  7028              STRB     r0,[r5,#0]            ;239
00004c  e004              B        |L2.88|
                  |L2.78|
00004e  4638              MOV      r0,r7                 ;241
000050  f7fffffe          BL       OS_CPU_SR_Restore
000054  2072              MOVS     r0,#0x72              ;242
000056  7028              STRB     r0,[r5,#0]            ;242
                  |L2.88|
000058  4620              MOV      r0,r4                 ;244
00005a  e7dd              B        |L2.24|
;;;246    
                          ENDP

                  |L2.92|
                          DCD      OSIntNesting
                  |L2.96|
                          DCD      OSFlagFreeList

                          AREA ||i.OSFlagDel||, CODE, READONLY, ALIGN=2

                  OSFlagDel PROC
;;;284    #if OS_FLAG_DEL_EN > 0
;;;285    OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;286    {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
000008  4615              MOV      r5,r2
;;;287        BOOLEAN       tasks_waiting;
;;;288        OS_FLAG_NODE *pnode;
;;;289        OS_FLAG_GRP  *pgrp_return;
;;;290    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;291        OS_CPU_SR     cpu_sr = 0;
00000a  f04f0a00          MOV      r10,#0
;;;292    #endif
;;;293    
;;;294    
;;;295    
;;;296    #if OS_ARG_CHK_EN > 0
;;;297        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
;;;298            return (pgrp);
;;;299        }
;;;300        if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
;;;301            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;302            return (pgrp);
;;;303        }
;;;304    #endif
;;;305        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
00000e  4834              LDR      r0,|L3.224|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000012  2800              CMP      r0,#0
000014  dd04              BLE      |L3.32|
;;;306            *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
000016  200f              MOVS     r0,#0xf
000018  7028              STRB     r0,[r5,#0]
;;;307            return (pgrp);
00001a  4620              MOV      r0,r4
                  |L3.28|
;;;308        }
;;;309        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
;;;310            *perr = OS_ERR_EVENT_TYPE;
;;;311            return (pgrp);
;;;312        }
;;;313        OS_ENTER_CRITICAL();
;;;314        if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
;;;315            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;316        } else {
;;;317            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;318        }
;;;319        switch (opt) {
;;;320            case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
;;;321                 if (tasks_waiting == OS_FALSE) {
;;;322    #if OS_FLAG_NAME_SIZE > 1
;;;323                     pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
;;;324                     pgrp->OSFlagName[1]  = OS_ASCII_NUL;
;;;325    #endif
;;;326                     pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
;;;327                     pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
;;;328                     pgrp->OSFlagFlags    = (OS_FLAGS)0;
;;;329                     OSFlagFreeList       = pgrp;
;;;330                     OS_EXIT_CRITICAL();
;;;331                     *perr                = OS_ERR_NONE;
;;;332                     pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
;;;333                 } else {
;;;334                     OS_EXIT_CRITICAL();
;;;335                     *perr                = OS_ERR_TASK_WAITING;
;;;336                     pgrp_return          = pgrp;
;;;337                 }
;;;338                 break;
;;;339    
;;;340            case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
;;;341                 pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
;;;342                 while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
;;;343                     (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
;;;344                     pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
;;;345                 }
;;;346    #if OS_FLAG_NAME_SIZE > 1
;;;347                 pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
;;;348                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
;;;349    #endif
;;;350                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
;;;351                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
;;;352                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
;;;353                 OSFlagFreeList       = pgrp;
;;;354                 OS_EXIT_CRITICAL();
;;;355                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;356                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;357                 }
;;;358                 *perr = OS_ERR_NONE;
;;;359                 pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
;;;360                 break;
;;;361    
;;;362            default:
;;;363                 OS_EXIT_CRITICAL();
;;;364                 *perr                = OS_ERR_INVALID_OPT;
;;;365                 pgrp_return          = pgrp;
;;;366                 break;
;;;367        }
;;;368        return (pgrp_return);
;;;369    }
00001c  e8bd87f0          POP      {r4-r10,pc}
                  |L3.32|
000020  7820              LDRB     r0,[r4,#0]            ;309
000022  2805              CMP      r0,#5                 ;309
000024  d003              BEQ      |L3.46|
000026  2001              MOVS     r0,#1                 ;310
000028  7028              STRB     r0,[r5,#0]            ;310
00002a  4620              MOV      r0,r4                 ;311
00002c  e7f6              B        |L3.28|
                  |L3.46|
00002e  f7fffffe          BL       OS_CPU_SR_Save
000032  4682              MOV      r10,r0                ;313
000034  6860              LDR      r0,[r4,#4]            ;314
000036  b108              CBZ      r0,|L3.60|
000038  2701              MOVS     r7,#1                 ;315
00003a  e000              B        |L3.62|
                  |L3.60|
00003c  2700              MOVS     r7,#0                 ;317
                  |L3.62|
00003e  f1b90f00          CMP      r9,#0                 ;319
000042  d003              BEQ      |L3.76|
000044  f1b90f01          CMP      r9,#1                 ;319
000048  d140              BNE      |L3.204|
00004a  e01b              B        |L3.132|
                  |L3.76|
00004c  b99f              CBNZ     r7,|L3.118|
00004e  203f              MOVS     r0,#0x3f              ;323
000050  72a0              STRB     r0,[r4,#0xa]          ;323
000052  2100              MOVS     r1,#0                 ;324
000054  72e1              STRB     r1,[r4,#0xb]          ;324
000056  2000              MOVS     r0,#0                 ;326
000058  7020              STRB     r0,[r4,#0]            ;326
00005a  4822              LDR      r0,|L3.228|
00005c  6800              LDR      r0,[r0,#0]            ;327  ; OSFlagFreeList
00005e  6060              STR      r0,[r4,#4]            ;327
000060  2000              MOVS     r0,#0                 ;328
000062  8120              STRH     r0,[r4,#8]            ;328
000064  481f              LDR      r0,|L3.228|
000066  6004              STR      r4,[r0,#0]            ;329  ; OSFlagFreeList
000068  4650              MOV      r0,r10                ;330
00006a  f7fffffe          BL       OS_CPU_SR_Restore
00006e  2000              MOVS     r0,#0                 ;331
000070  7028              STRB     r0,[r5,#0]            ;331
000072  2600              MOVS     r6,#0                 ;332
000074  e005              B        |L3.130|
                  |L3.118|
000076  4650              MOV      r0,r10                ;334
000078  f7fffffe          BL       OS_CPU_SR_Restore
00007c  2049              MOVS     r0,#0x49              ;335
00007e  7028              STRB     r0,[r5,#0]            ;335
000080  4626              MOV      r6,r4                 ;336
                  |L3.130|
000082  e02a              B        |L3.218|
                  |L3.132|
000084  f8d48004          LDR      r8,[r4,#4]            ;341
000088  e005              B        |L3.150|
                  |L3.138|
00008a  2100              MOVS     r1,#0                 ;343
00008c  4640              MOV      r0,r8                 ;343
00008e  f7fffffe          BL       OS_FlagTaskRdy
000092  f8d88000          LDR      r8,[r8,#0]            ;344
                  |L3.150|
000096  f1b80f00          CMP      r8,#0                 ;342
00009a  d1f6              BNE      |L3.138|
00009c  203f              MOVS     r0,#0x3f              ;347
00009e  72a0              STRB     r0,[r4,#0xa]          ;347
0000a0  2100              MOVS     r1,#0                 ;348
0000a2  72e1              STRB     r1,[r4,#0xb]          ;348
0000a4  2000              MOVS     r0,#0                 ;350
0000a6  7020              STRB     r0,[r4,#0]            ;350
0000a8  480e              LDR      r0,|L3.228|
0000aa  6800              LDR      r0,[r0,#0]            ;351  ; OSFlagFreeList
0000ac  6060              STR      r0,[r4,#4]            ;351
0000ae  2000              MOVS     r0,#0                 ;352
0000b0  8120              STRH     r0,[r4,#8]            ;352
0000b2  480c              LDR      r0,|L3.228|
0000b4  6004              STR      r4,[r0,#0]            ;353  ; OSFlagFreeList
0000b6  4650              MOV      r0,r10                ;354
0000b8  f7fffffe          BL       OS_CPU_SR_Restore
0000bc  2f01              CMP      r7,#1                 ;355
0000be  d101              BNE      |L3.196|
0000c0  f7fffffe          BL       OS_Sched
                  |L3.196|
0000c4  2000              MOVS     r0,#0                 ;358
0000c6  7028              STRB     r0,[r5,#0]            ;358
0000c8  2600              MOVS     r6,#0                 ;359
0000ca  e006              B        |L3.218|
                  |L3.204|
0000cc  4650              MOV      r0,r10                ;363
0000ce  f7fffffe          BL       OS_CPU_SR_Restore
0000d2  2007              MOVS     r0,#7                 ;364
0000d4  7028              STRB     r0,[r5,#0]            ;364
0000d6  4626              MOV      r6,r4                 ;365
0000d8  bf00              NOP                            ;366
                  |L3.218|
0000da  bf00              NOP                            ;338
0000dc  4630              MOV      r0,r6                 ;368
0000de  e79d              B        |L3.28|
;;;370    #endif
                          ENDP

                  |L3.224|
                          DCD      OSIntNesting
                  |L3.228|
                          DCD      OSFlagFreeList

                          AREA ||i.OSFlagNameGet||, CODE, READONLY, ALIGN=2

                  OSFlagNameGet PROC
;;;395    #if OS_FLAG_NAME_SIZE > 1
;;;396    INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;397    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;398        INT8U      len;
;;;399    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;400        OS_CPU_SR  cpu_sr = 0;
00000a  2700              MOVS     r7,#0
;;;401    #endif
;;;402    
;;;403    
;;;404    
;;;405    #if OS_ARG_CHK_EN > 0
;;;406        if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
;;;407            return (0);
;;;408        }
;;;409        if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
;;;410            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;411            return (0);
;;;412        }
;;;413        if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
;;;414            *perr = OS_ERR_PNAME_NULL;
;;;415            return (0);
;;;416        }
;;;417    #endif
;;;418        if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
00000c  4811              LDR      r0,|L4.84|
00000e  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000010  2800              CMP      r0,#0
000012  dd04              BLE      |L4.30|
;;;419            *perr = OS_ERR_NAME_GET_ISR;
000014  2011              MOVS     r0,#0x11
000016  7020              STRB     r0,[r4,#0]
;;;420            return (0);
000018  2000              MOVS     r0,#0
                  |L4.26|
;;;421        }
;;;422        OS_ENTER_CRITICAL();
;;;423        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
;;;424            OS_EXIT_CRITICAL();
;;;425            *perr = OS_ERR_EVENT_TYPE;
;;;426            return (0);
;;;427        }
;;;428        len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
;;;429        OS_EXIT_CRITICAL();
;;;430        *perr = OS_ERR_NONE;
;;;431        return (len);
;;;432    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L4.30|
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4607              MOV      r7,r0                 ;422
000024  7828              LDRB     r0,[r5,#0]            ;423
000026  2805              CMP      r0,#5                 ;423
000028  d006              BEQ      |L4.56|
00002a  4638              MOV      r0,r7                 ;424
00002c  f7fffffe          BL       OS_CPU_SR_Restore
000030  2001              MOVS     r0,#1                 ;425
000032  7020              STRB     r0,[r4,#0]            ;425
000034  2000              MOVS     r0,#0                 ;426
000036  e7f0              B        |L4.26|
                  |L4.56|
000038  f105010a          ADD      r1,r5,#0xa            ;428
00003c  4630              MOV      r0,r6                 ;428
00003e  f7fffffe          BL       OS_StrCopy
000042  4680              MOV      r8,r0                 ;428
000044  4638              MOV      r0,r7                 ;429
000046  f7fffffe          BL       OS_CPU_SR_Restore
00004a  2000              MOVS     r0,#0                 ;430
00004c  7020              STRB     r0,[r4,#0]            ;430
00004e  4640              MOV      r0,r8                 ;431
000050  e7e3              B        |L4.26|
;;;433    #endif
                          ENDP

000052  0000              DCW      0x0000
                  |L4.84|
                          DCD      OSIntNesting

                          AREA ||i.OSFlagNameSet||, CODE, READONLY, ALIGN=2

                  OSFlagNameSet PROC
;;;459    #if OS_FLAG_NAME_SIZE > 1
;;;460    void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;461    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;462        INT8U      len;
;;;463    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;464        OS_CPU_SR  cpu_sr = 0;
00000a  f04f0800          MOV      r8,#0
;;;465    #endif
;;;466    
;;;467    
;;;468    
;;;469    #if OS_ARG_CHK_EN > 0
;;;470        if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
;;;471            return;
;;;472        }
;;;473        if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
;;;474            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;475            return;
;;;476        }
;;;477        if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
;;;478            *perr = OS_ERR_PNAME_NULL;
;;;479            return;
;;;480        }
;;;481    #endif
;;;482        if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
00000e  4816              LDR      r0,|L5.104|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000012  2800              CMP      r0,#0
000014  dd03              BLE      |L5.30|
;;;483            *perr = OS_ERR_NAME_SET_ISR;
000016  2012              MOVS     r0,#0x12
000018  7020              STRB     r0,[r4,#0]
                  |L5.26|
;;;484            return;
;;;485        }
;;;486        OS_ENTER_CRITICAL();
;;;487        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
;;;488            OS_EXIT_CRITICAL();
;;;489            *perr = OS_ERR_EVENT_TYPE;
;;;490            return;
;;;491        }
;;;492        len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
;;;493        if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
;;;494            OS_EXIT_CRITICAL();
;;;495            *perr = OS_ERR_FLAG_NAME_TOO_LONG;
;;;496            return;
;;;497        }
;;;498        (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
;;;499        OS_EXIT_CRITICAL();
;;;500        *perr = OS_ERR_NONE;
;;;501        return;
;;;502    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L5.30|
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4680              MOV      r8,r0                 ;486
000024  7828              LDRB     r0,[r5,#0]            ;487
000026  2805              CMP      r0,#5                 ;487
000028  d005              BEQ      |L5.54|
00002a  4640              MOV      r0,r8                 ;488
00002c  f7fffffe          BL       OS_CPU_SR_Restore
000030  2001              MOVS     r0,#1                 ;489
000032  7020              STRB     r0,[r4,#0]            ;489
000034  e7f1              B        |L5.26|
                  |L5.54|
000036  4638              MOV      r0,r7                 ;492
000038  f7fffffe          BL       OS_StrLen
00003c  4606              MOV      r6,r0                 ;492
00003e  2e0f              CMP      r6,#0xf               ;493
000040  dd05              BLE      |L5.78|
000042  4640              MOV      r0,r8                 ;494
000044  f7fffffe          BL       OS_CPU_SR_Restore
000048  2073              MOVS     r0,#0x73              ;495
00004a  7020              STRB     r0,[r4,#0]            ;495
00004c  e7e5              B        |L5.26|
                  |L5.78|
00004e  4639              MOV      r1,r7                 ;498
000050  f105000a          ADD      r0,r5,#0xa            ;498
000054  f7fffffe          BL       OS_StrCopy
000058  4640              MOV      r0,r8                 ;499
00005a  f7fffffe          BL       OS_CPU_SR_Restore
00005e  2000              MOVS     r0,#0                 ;500
000060  7020              STRB     r0,[r4,#0]            ;500
000062  bf00              NOP                            ;501
000064  e7d9              B        |L5.26|
;;;503    #endif
                          ENDP

000066  0000              DCW      0x0000
                  |L5.104|
                          DCD      OSIntNesting

                          AREA ||i.OSFlagPend||, CODE, READONLY, ALIGN=2

                  OSFlagPend PROC
;;;559    
;;;560    OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;561    {
000004  b089              SUB      sp,sp,#0x24
000006  4605              MOV      r5,r0
000008  460f              MOV      r7,r1
00000a  4691              MOV      r9,r2
00000c  469a              MOV      r10,r3
00000e  9e12              LDR      r6,[sp,#0x48]
;;;562        OS_FLAG_NODE  node;
;;;563        OS_FLAGS      flags_rdy;
;;;564        INT8U         result;
;;;565        INT8U         pend_stat;
;;;566        BOOLEAN       consume;
;;;567    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;568        OS_CPU_SR     cpu_sr = 0;
000010  2000              MOVS     r0,#0
000012  9002              STR      r0,[sp,#8]
;;;569    #endif
;;;570    
;;;571    
;;;572    
;;;573    #if OS_ARG_CHK_EN > 0
;;;574        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
;;;575            return ((OS_FLAGS)0);
;;;576        }
;;;577        if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
;;;578            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;579            return ((OS_FLAGS)0);
;;;580        }
;;;581    #endif
;;;582        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
000014  488d              LDR      r0,|L6.588|
000016  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
000018  2800              CMP      r0,#0
00001a  dd05              BLE      |L6.40|
;;;583            *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
00001c  2002              MOVS     r0,#2
00001e  7030              STRB     r0,[r6,#0]
;;;584            return ((OS_FLAGS)0);
000020  2000              MOVS     r0,#0
                  |L6.34|
;;;585        }
;;;586        if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
;;;587            *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
;;;588            return ((OS_FLAGS)0);
;;;589        }
;;;590        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
;;;591            *perr = OS_ERR_EVENT_TYPE;
;;;592            return ((OS_FLAGS)0);
;;;593        }
;;;594        result = (INT8U)(wait_type & OS_FLAG_CONSUME);
;;;595        if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
;;;596            wait_type &= ~(INT8U)OS_FLAG_CONSUME;
;;;597            consume    = OS_TRUE;
;;;598        } else {
;;;599            consume    = OS_FALSE;
;;;600        }
;;;601    /*$PAGE*/
;;;602        OS_ENTER_CRITICAL();
;;;603        switch (wait_type) {
;;;604            case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
;;;605                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
;;;606                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;607                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;608                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
;;;609                     }
;;;610                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;611                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;612                     *perr                   = OS_ERR_NONE;
;;;613                     return (flags_rdy);
;;;614                 } else {                                      /* Block task until events occur or timeout */
;;;615                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;616                     OS_EXIT_CRITICAL();
;;;617                 }
;;;618                 break;
;;;619    
;;;620            case OS_FLAG_WAIT_SET_ANY:
;;;621                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
;;;622                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
;;;623                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;624                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
;;;625                     }
;;;626                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;627                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;628                     *perr                   = OS_ERR_NONE;
;;;629                     return (flags_rdy);
;;;630                 } else {                                      /* Block task until events occur or timeout */
;;;631                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;632                     OS_EXIT_CRITICAL();
;;;633                 }
;;;634                 break;
;;;635    
;;;636    #if OS_FLAG_WAIT_CLR_EN > 0
;;;637            case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
;;;638                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
;;;639                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;640                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;641                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
;;;642                     }
;;;643                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;644                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;645                     *perr                   = OS_ERR_NONE;
;;;646                     return (flags_rdy);
;;;647                 } else {                                      /* Block task until events occur or timeout */
;;;648                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;649                     OS_EXIT_CRITICAL();
;;;650                 }
;;;651                 break;
;;;652    
;;;653            case OS_FLAG_WAIT_CLR_ANY:
;;;654                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
;;;655                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
;;;656                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;657                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
;;;658                     }
;;;659                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;660                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;661                     *perr                   = OS_ERR_NONE;
;;;662                     return (flags_rdy);
;;;663                 } else {                                      /* Block task until events occur or timeout */
;;;664                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;665                     OS_EXIT_CRITICAL();
;;;666                 }
;;;667                 break;
;;;668    #endif
;;;669    
;;;670            default:
;;;671                 OS_EXIT_CRITICAL();
;;;672                 flags_rdy = (OS_FLAGS)0;
;;;673                 *perr      = OS_ERR_FLAG_WAIT_TYPE;
;;;674                 return (flags_rdy);
;;;675        }
;;;676    /*$PAGE*/
;;;677        OS_Sched();                                            /* Find next HPT ready to run               */
;;;678        OS_ENTER_CRITICAL();
;;;679        if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
;;;680            pend_stat                = OSTCBCur->OSTCBStatPend;
;;;681            OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;682            OS_FlagUnlink(&node);
;;;683            OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
;;;684            OS_EXIT_CRITICAL();
;;;685            flags_rdy                = (OS_FLAGS)0;
;;;686            switch (pend_stat) {
;;;687                case OS_STAT_PEND_ABORT:
;;;688                     *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
;;;689                     break;
;;;690    
;;;691                case OS_STAT_PEND_TO:
;;;692                default:
;;;693                     *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
;;;694                     break;
;;;695            }
;;;696            return (flags_rdy);
;;;697        }
;;;698        flags_rdy = OSTCBCur->OSTCBFlagsRdy;
;;;699        if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
;;;700            switch (wait_type) {
;;;701                case OS_FLAG_WAIT_SET_ALL:
;;;702                case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
;;;703                     pgrp->OSFlagFlags &= ~flags_rdy;
;;;704                     break;
;;;705    
;;;706    #if OS_FLAG_WAIT_CLR_EN > 0
;;;707                case OS_FLAG_WAIT_CLR_ALL:
;;;708                case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
;;;709                     pgrp->OSFlagFlags |=  flags_rdy;
;;;710                     break;
;;;711    #endif
;;;712                default:
;;;713                     OS_EXIT_CRITICAL();
;;;714                     *perr = OS_ERR_FLAG_WAIT_TYPE;
;;;715                     return ((OS_FLAGS)0);
;;;716            }
;;;717        }
;;;718        OS_EXIT_CRITICAL();
;;;719        *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
;;;720        return (flags_rdy);
;;;721    }
000022  b009              ADD      sp,sp,#0x24
000024  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.40|
000028  4889              LDR      r0,|L6.592|
00002a  7800              LDRB     r0,[r0,#0]            ;586  ; OSLockNesting
00002c  2800              CMP      r0,#0                 ;586
00002e  dd03              BLE      |L6.56|
000030  200d              MOVS     r0,#0xd               ;587
000032  7030              STRB     r0,[r6,#0]            ;587
000034  2000              MOVS     r0,#0                 ;588
000036  e7f4              B        |L6.34|
                  |L6.56|
000038  7828              LDRB     r0,[r5,#0]            ;590
00003a  2805              CMP      r0,#5                 ;590
00003c  d003              BEQ      |L6.70|
00003e  2001              MOVS     r0,#1                 ;591
000040  7030              STRB     r0,[r6,#0]            ;591
000042  2000              MOVS     r0,#0                 ;592
000044  e7ed              B        |L6.34|
                  |L6.70|
000046  f0090b80          AND      r11,r9,#0x80          ;594
00004a  f1bb0f00          CMP      r11,#0                ;595
00004e  d004              BEQ      |L6.90|
000050  f0290980          BIC      r9,r9,#0x80           ;596
000054  f04f0801          MOV      r8,#1                 ;597
000058  e001              B        |L6.94|
                  |L6.90|
00005a  f04f0800          MOV      r8,#0                 ;599
                  |L6.94|
00005e  f7fffffe          BL       OS_CPU_SR_Save
000062  9002              STR      r0,[sp,#8]            ;602
000064  f1b90f00          CMP      r9,#0                 ;603
000068  d04a              BEQ      |L6.256|
00006a  f1b90f01          CMP      r9,#1                 ;603
00006e  d068              BEQ      |L6.322|
000070  f1b90f02          CMP      r9,#2                 ;603
000074  d003              BEQ      |L6.126|
000076  f1b90f03          CMP      r9,#3                 ;603
00007a  d176              BNE      |L6.362|
00007c  e020              B        |L6.192|
                  |L6.126|
00007e  8928              LDRH     r0,[r5,#8]            ;605
000080  ea000407          AND      r4,r0,r7              ;605
000084  42bc              CMP      r4,r7                 ;606
000086  d10f              BNE      |L6.168|
000088  f1b80f01          CMP      r8,#1                 ;607
00008c  d102              BNE      |L6.148|
00008e  8928              LDRH     r0,[r5,#8]            ;608
000090  43a0              BICS     r0,r0,r4              ;608
000092  8128              STRH     r0,[r5,#8]            ;608
                  |L6.148|
000094  486f              LDR      r0,|L6.596|
000096  6800              LDR      r0,[r0,#0]            ;610  ; OSTCBCur
000098  8584              STRH     r4,[r0,#0x2c]         ;610
00009a  9802              LDR      r0,[sp,#8]            ;611
00009c  f7fffffe          BL       OS_CPU_SR_Restore
0000a0  2000              MOVS     r0,#0                 ;612
0000a2  7030              STRB     r0,[r6,#0]            ;612
0000a4  4620              MOV      r0,r4                 ;613
0000a6  e7bc              B        |L6.34|
                  |L6.168|
0000a8  464b              MOV      r3,r9                 ;615
0000aa  463a              MOV      r2,r7                 ;615
0000ac  a904              ADD      r1,sp,#0x10           ;615
0000ae  4628              MOV      r0,r5                 ;615
0000b0  f8cda000          STR      r10,[sp,#0]           ;615
0000b4  f7fffffe          BL       OS_FlagBlock
0000b8  9802              LDR      r0,[sp,#8]            ;616
0000ba  f7fffffe          BL       OS_CPU_SR_Restore
0000be  e069              B        |L6.404|
                  |L6.192|
0000c0  8928              LDRH     r0,[r5,#8]            ;621
0000c2  ea000407          AND      r4,r0,r7              ;621
0000c6  b17c              CBZ      r4,|L6.232|
0000c8  f1b80f01          CMP      r8,#1                 ;623
0000cc  d102              BNE      |L6.212|
0000ce  8928              LDRH     r0,[r5,#8]            ;624
0000d0  43a0              BICS     r0,r0,r4              ;624
0000d2  8128              STRH     r0,[r5,#8]            ;624
                  |L6.212|
0000d4  485f              LDR      r0,|L6.596|
0000d6  6800              LDR      r0,[r0,#0]            ;626  ; OSTCBCur
0000d8  8584              STRH     r4,[r0,#0x2c]         ;626
0000da  9802              LDR      r0,[sp,#8]            ;627
0000dc  f7fffffe          BL       OS_CPU_SR_Restore
0000e0  2000              MOVS     r0,#0                 ;628
0000e2  7030              STRB     r0,[r6,#0]            ;628
0000e4  4620              MOV      r0,r4                 ;629
0000e6  e79c              B        |L6.34|
                  |L6.232|
0000e8  464b              MOV      r3,r9                 ;631
0000ea  463a              MOV      r2,r7                 ;631
0000ec  a904              ADD      r1,sp,#0x10           ;631
0000ee  4628              MOV      r0,r5                 ;631
0000f0  f8cda000          STR      r10,[sp,#0]           ;631
0000f4  f7fffffe          BL       OS_FlagBlock
0000f8  9802              LDR      r0,[sp,#8]            ;632
0000fa  f7fffffe          BL       OS_CPU_SR_Restore
0000fe  e049              B        |L6.404|
                  |L6.256|
000100  8928              LDRH     r0,[r5,#8]            ;638
000102  ea270400          BIC      r4,r7,r0              ;638
000106  42bc              CMP      r4,r7                 ;639
000108  d10f              BNE      |L6.298|
00010a  f1b80f01          CMP      r8,#1                 ;640
00010e  d102              BNE      |L6.278|
000110  8928              LDRH     r0,[r5,#8]            ;641
000112  4320              ORRS     r0,r0,r4              ;641
000114  8128              STRH     r0,[r5,#8]            ;641
                  |L6.278|
000116  484f              LDR      r0,|L6.596|
000118  6800              LDR      r0,[r0,#0]            ;643  ; OSTCBCur
00011a  8584              STRH     r4,[r0,#0x2c]         ;643
00011c  9802              LDR      r0,[sp,#8]            ;644
00011e  f7fffffe          BL       OS_CPU_SR_Restore
000122  2000              MOVS     r0,#0                 ;645
000124  7030              STRB     r0,[r6,#0]            ;645
000126  4620              MOV      r0,r4                 ;646
000128  e77b              B        |L6.34|
                  |L6.298|
00012a  464b              MOV      r3,r9                 ;648
00012c  463a              MOV      r2,r7                 ;648
00012e  a904              ADD      r1,sp,#0x10           ;648
000130  4628              MOV      r0,r5                 ;648
000132  f8cda000          STR      r10,[sp,#0]           ;648
000136  f7fffffe          BL       OS_FlagBlock
00013a  9802              LDR      r0,[sp,#8]            ;649
00013c  f7fffffe          BL       OS_CPU_SR_Restore
000140  e028              B        |L6.404|
                  |L6.322|
000142  8928              LDRH     r0,[r5,#8]            ;654
000144  ea270400          BIC      r4,r7,r0              ;654
000148  b184              CBZ      r4,|L6.364|
00014a  f1b80f01          CMP      r8,#1                 ;656
00014e  d102              BNE      |L6.342|
000150  8928              LDRH     r0,[r5,#8]            ;657
000152  4320              ORRS     r0,r0,r4              ;657
000154  8128              STRH     r0,[r5,#8]            ;657
                  |L6.342|
000156  483f              LDR      r0,|L6.596|
000158  6800              LDR      r0,[r0,#0]            ;659  ; OSTCBCur
00015a  8584              STRH     r4,[r0,#0x2c]         ;659
00015c  9802              LDR      r0,[sp,#8]            ;660
00015e  f7fffffe          BL       OS_CPU_SR_Restore
000162  2000              MOVS     r0,#0                 ;661
000164  7030              STRB     r0,[r6,#0]            ;661
000166  4620              MOV      r0,r4                 ;662
000168  e75b              B        |L6.34|
                  |L6.362|
00016a  e00b              B        |L6.388|
                  |L6.364|
00016c  464b              MOV      r3,r9                 ;664
00016e  463a              MOV      r2,r7                 ;664
000170  a904              ADD      r1,sp,#0x10           ;664
000172  4628              MOV      r0,r5                 ;664
000174  f8cda000          STR      r10,[sp,#0]           ;664
000178  f7fffffe          BL       OS_FlagBlock
00017c  9802              LDR      r0,[sp,#8]            ;665
00017e  f7fffffe          BL       OS_CPU_SR_Restore
000182  e007              B        |L6.404|
                  |L6.388|
000184  9802              LDR      r0,[sp,#8]            ;671
000186  f7fffffe          BL       OS_CPU_SR_Restore
00018a  2400              MOVS     r4,#0                 ;672
00018c  206f              MOVS     r0,#0x6f              ;673
00018e  7030              STRB     r0,[r6,#0]            ;673
000190  4620              MOV      r0,r4                 ;674
000192  e746              B        |L6.34|
                  |L6.404|
000194  bf00              NOP                            ;618
000196  f7fffffe          BL       OS_Sched
00019a  f7fffffe          BL       OS_CPU_SR_Save
00019e  9002              STR      r0,[sp,#8]            ;678
0001a0  482c              LDR      r0,|L6.596|
0001a2  6800              LDR      r0,[r0,#0]            ;679  ; OSTCBCur
0001a4  f8900031          LDRB     r0,[r0,#0x31]         ;679
0001a8  b320              CBZ      r0,|L6.500|
0001aa  482a              LDR      r0,|L6.596|
0001ac  6800              LDR      r0,[r0,#0]            ;680  ; OSTCBCur
0001ae  f8900031          LDRB     r0,[r0,#0x31]         ;680
0001b2  9003              STR      r0,[sp,#0xc]          ;680
0001b4  2000              MOVS     r0,#0                 ;681
0001b6  4927              LDR      r1,|L6.596|
0001b8  6809              LDR      r1,[r1,#0]            ;681  ; OSTCBCur
0001ba  f8810031          STRB     r0,[r1,#0x31]         ;681
0001be  a804              ADD      r0,sp,#0x10           ;682
0001c0  f7fffffe          BL       OS_FlagUnlink
0001c4  2000              MOVS     r0,#0                 ;683
0001c6  4923              LDR      r1,|L6.596|
0001c8  6809              LDR      r1,[r1,#0]            ;683  ; OSTCBCur
0001ca  f8810030          STRB     r0,[r1,#0x30]         ;683
0001ce  9802              LDR      r0,[sp,#8]            ;684
0001d0  f7fffffe          BL       OS_CPU_SR_Restore
0001d4  2400              MOVS     r4,#0                 ;685
0001d6  9803              LDR      r0,[sp,#0xc]          ;686
0001d8  2801              CMP      r0,#1                 ;686
0001da  d005              BEQ      |L6.488|
0001dc  2802              CMP      r0,#2                 ;686
0001de  d102              BNE      |L6.486|
0001e0  200e              MOVS     r0,#0xe               ;688
0001e2  7030              STRB     r0,[r6,#0]            ;688
0001e4  e003              B        |L6.494|
                  |L6.486|
0001e6  bf00              NOP                            ;691
                  |L6.488|
0001e8  200a              MOVS     r0,#0xa               ;693
0001ea  7030              STRB     r0,[r6,#0]            ;693
0001ec  bf00              NOP                            ;694
                  |L6.494|
0001ee  bf00              NOP                            ;689
0001f0  4620              MOV      r0,r4                 ;696
0001f2  e716              B        |L6.34|
                  |L6.500|
0001f4  4817              LDR      r0,|L6.596|
0001f6  6800              LDR      r0,[r0,#0]            ;698  ; OSTCBCur
0001f8  8d84              LDRH     r4,[r0,#0x2c]         ;698
0001fa  f1b80f01          CMP      r8,#1                 ;699
0001fe  d11e              BNE      |L6.574|
000200  f1b90f00          CMP      r9,#0                 ;700
000204  d00e              BEQ      |L6.548|
000206  f1b90f01          CMP      r9,#1                 ;700
00020a  d00c              BEQ      |L6.550|
00020c  f1b90f02          CMP      r9,#2                 ;700
000210  d003              BEQ      |L6.538|
000212  f1b90f03          CMP      r9,#3                 ;700
000216  d10a              BNE      |L6.558|
000218  e000              B        |L6.540|
                  |L6.538|
00021a  bf00              NOP                            ;702
                  |L6.540|
00021c  8928              LDRH     r0,[r5,#8]            ;703
00021e  43a0              BICS     r0,r0,r4              ;703
000220  8128              STRH     r0,[r5,#8]            ;703
000222  e00b              B        |L6.572|
                  |L6.548|
000224  bf00              NOP                            ;708
                  |L6.550|
000226  8928              LDRH     r0,[r5,#8]            ;709
000228  4320              ORRS     r0,r0,r4              ;709
00022a  8128              STRH     r0,[r5,#8]            ;709
00022c  e006              B        |L6.572|
                  |L6.558|
00022e  9802              LDR      r0,[sp,#8]            ;713
000230  f7fffffe          BL       OS_CPU_SR_Restore
000234  206f              MOVS     r0,#0x6f              ;714
000236  7030              STRB     r0,[r6,#0]            ;714
000238  2000              MOVS     r0,#0                 ;715
00023a  e6f2              B        |L6.34|
                  |L6.572|
00023c  bf00              NOP                            ;704
                  |L6.574|
00023e  9802              LDR      r0,[sp,#8]            ;718
000240  f7fffffe          BL       OS_CPU_SR_Restore
000244  2000              MOVS     r0,#0                 ;719
000246  7030              STRB     r0,[r6,#0]            ;719
000248  4620              MOV      r0,r4                 ;720
00024a  e6ea              B        |L6.34|
;;;722    /*$PAGE*/
                          ENDP

                  |L6.588|
                          DCD      OSIntNesting
                  |L6.592|
                          DCD      OSLockNesting
                  |L6.596|
                          DCD      OSTCBCur

                          AREA ||i.OSFlagPendGetFlagsRdy||, CODE, READONLY, ALIGN=2

                  OSFlagPendGetFlagsRdy PROC
;;;737    
;;;738    OS_FLAGS  OSFlagPendGetFlagsRdy (void)
000000  b570              PUSH     {r4-r6,lr}
;;;739    {
;;;740        OS_FLAGS      flags;
;;;741    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;742        OS_CPU_SR     cpu_sr = 0;
000002  2500              MOVS     r5,#0
;;;743    #endif
;;;744    
;;;745    
;;;746    
;;;747        OS_ENTER_CRITICAL();
000004  f7fffffe          BL       OS_CPU_SR_Save
000008  4605              MOV      r5,r0
;;;748        flags = OSTCBCur->OSTCBFlagsRdy;
00000a  4804              LDR      r0,|L7.28|
00000c  6800              LDR      r0,[r0,#0]  ; OSTCBCur
00000e  8d84              LDRH     r4,[r0,#0x2c]
;;;749        OS_EXIT_CRITICAL();
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       OS_CPU_SR_Restore
;;;750        return (flags);
000016  4620              MOV      r0,r4
;;;751    }
000018  bd70              POP      {r4-r6,pc}
;;;752    
                          ENDP

00001a  0000              DCW      0x0000
                  |L7.28|
                          DCD      OSTCBCur

                          AREA ||i.OSFlagPost||, CODE, READONLY, ALIGN=1

                  OSFlagPost PROC
;;;794    */
;;;795    OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;796    {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
000008  4692              MOV      r10,r2
00000a  461e              MOV      r6,r3
;;;797        OS_FLAG_NODE *pnode;
;;;798        BOOLEAN       sched;
;;;799        OS_FLAGS      flags_cur;
;;;800        OS_FLAGS      flags_rdy;
;;;801        BOOLEAN       rdy;
;;;802    #if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
;;;803        OS_CPU_SR     cpu_sr = 0;
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
;;;804    #endif
;;;805    
;;;806    
;;;807    
;;;808    #if OS_ARG_CHK_EN > 0
;;;809        if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
;;;810            return ((OS_FLAGS)0);
;;;811        }
;;;812        if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
;;;813            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;814            return ((OS_FLAGS)0);
;;;815        }
;;;816    #endif
;;;817        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
000010  7820              LDRB     r0,[r4,#0]
000012  2805              CMP      r0,#5
000014  d004              BEQ      |L8.32|
;;;818            *perr = OS_ERR_EVENT_TYPE;
000016  2001              MOVS     r0,#1
000018  7030              STRB     r0,[r6,#0]
;;;819            return ((OS_FLAGS)0);
00001a  2000              MOVS     r0,#0
                  |L8.28|
;;;820        }
;;;821    /*$PAGE*/
;;;822        OS_ENTER_CRITICAL();
;;;823        switch (opt) {
;;;824            case OS_FLAG_CLR:
;;;825                 pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
;;;826                 break;
;;;827    
;;;828            case OS_FLAG_SET:
;;;829                 pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
;;;830                 break;
;;;831    
;;;832            default:
;;;833                 OS_EXIT_CRITICAL();                     /* INVALID option                                 */
;;;834                 *perr = OS_ERR_FLAG_INVALID_OPT;
;;;835                 return ((OS_FLAGS)0);
;;;836        }
;;;837        sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
;;;838        pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
;;;839        while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
;;;840            switch (pnode->OSFlagNodeWaitType) {
;;;841                case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
;;;842                     flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;843                     if (flags_rdy == pnode->OSFlagNodeFlags) {
;;;844                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;845                         if (rdy == OS_TRUE) {
;;;846                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;847                         }
;;;848                     }
;;;849                     break;
;;;850    
;;;851                case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
;;;852                     flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;853                     if (flags_rdy != (OS_FLAGS)0) {
;;;854                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;855                         if (rdy == OS_TRUE) {
;;;856                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;857                         }
;;;858                     }
;;;859                     break;
;;;860    
;;;861    #if OS_FLAG_WAIT_CLR_EN > 0
;;;862                case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
;;;863                     flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;864                     if (flags_rdy == pnode->OSFlagNodeFlags) {
;;;865                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;866                         if (rdy == OS_TRUE) {
;;;867                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;868                         }
;;;869                     }
;;;870                     break;
;;;871    
;;;872                case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
;;;873                     flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;874                     if (flags_rdy != (OS_FLAGS)0) {
;;;875                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;876                         if (rdy == OS_TRUE) {
;;;877                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;878                         }
;;;879                     }
;;;880                     break;
;;;881    #endif
;;;882                default:
;;;883                     OS_EXIT_CRITICAL();
;;;884                     *perr = OS_ERR_FLAG_WAIT_TYPE;
;;;885                     return ((OS_FLAGS)0);
;;;886            }
;;;887            pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
;;;888        }
;;;889        OS_EXIT_CRITICAL();
;;;890        if (sched == OS_TRUE) {
;;;891            OS_Sched();
;;;892        }
;;;893        OS_ENTER_CRITICAL();
;;;894        flags_cur = pgrp->OSFlagFlags;
;;;895        OS_EXIT_CRITICAL();
;;;896        *perr     = OS_ERR_NONE;
;;;897        return (flags_cur);
;;;898    }
00001c  e8bd9ffc          POP      {r2-r12,pc}
                  |L8.32|
000020  f7fffffe          BL       OS_CPU_SR_Save
000024  9000              STR      r0,[sp,#0]            ;822
000026  f1ba0f00          CMP      r10,#0                ;823
00002a  d003              BEQ      |L8.52|
00002c  f1ba0f01          CMP      r10,#1                ;823
000030  d10a              BNE      |L8.72|
000032  e004              B        |L8.62|
                  |L8.52|
000034  8920              LDRH     r0,[r4,#8]            ;825
000036  ea200009          BIC      r0,r0,r9              ;825
00003a  8120              STRH     r0,[r4,#8]            ;825
00003c  e00b              B        |L8.86|
                  |L8.62|
00003e  8920              LDRH     r0,[r4,#8]            ;829
000040  ea400009          ORR      r0,r0,r9              ;829
000044  8120              STRH     r0,[r4,#8]            ;829
000046  e006              B        |L8.86|
                  |L8.72|
000048  9800              LDR      r0,[sp,#0]            ;833
00004a  f7fffffe          BL       OS_CPU_SR_Restore
00004e  2071              MOVS     r0,#0x71              ;834
000050  7030              STRB     r0,[r6,#0]            ;834
000052  2000              MOVS     r0,#0                 ;835
000054  e7e2              B        |L8.28|
                  |L8.86|
000056  bf00              NOP                            ;826
000058  f04f0b00          MOV      r11,#0                ;837
00005c  6865              LDR      r5,[r4,#4]            ;838
00005e  e055              B        |L8.268|
                  |L8.96|
000060  7ca8              LDRB     r0,[r5,#0x12]         ;840
000062  b340              CBZ      r0,|L8.182|
000064  2801              CMP      r0,#1                 ;840
000066  d038              BEQ      |L8.218|
000068  2802              CMP      r0,#2                 ;840
00006a  d002              BEQ      |L8.114|
00006c  2803              CMP      r0,#3                 ;840
00006e  d144              BNE      |L8.250|
000070  e011              B        |L8.150|
                  |L8.114|
000072  8920              LDRH     r0,[r4,#8]            ;842
000074  8a29              LDRH     r1,[r5,#0x10]         ;842
000076  ea000701          AND      r7,r0,r1              ;842
00007a  8a28              LDRH     r0,[r5,#0x10]         ;843
00007c  42b8              CMP      r0,r7                 ;843
00007e  d109              BNE      |L8.148|
000080  4639              MOV      r1,r7                 ;844
000082  4628              MOV      r0,r5                 ;844
000084  f7fffffe          BL       OS_FlagTaskRdy
000088  4680              MOV      r8,r0                 ;844
00008a  f1b80f01          CMP      r8,#1                 ;845
00008e  d101              BNE      |L8.148|
000090  f04f0b01          MOV      r11,#1                ;846
                  |L8.148|
000094  e038              B        |L8.264|
                  |L8.150|
000096  8920              LDRH     r0,[r4,#8]            ;852
000098  8a29              LDRH     r1,[r5,#0x10]         ;852
00009a  ea000701          AND      r7,r0,r1              ;852
00009e  b14f              CBZ      r7,|L8.180|
0000a0  4639              MOV      r1,r7                 ;854
0000a2  4628              MOV      r0,r5                 ;854
0000a4  f7fffffe          BL       OS_FlagTaskRdy
0000a8  4680              MOV      r8,r0                 ;854
0000aa  f1b80f01          CMP      r8,#1                 ;855
0000ae  d101              BNE      |L8.180|
0000b0  f04f0b01          MOV      r11,#1                ;856
                  |L8.180|
0000b4  e028              B        |L8.264|
                  |L8.182|
0000b6  8a28              LDRH     r0,[r5,#0x10]         ;863
0000b8  8921              LDRH     r1,[r4,#8]            ;863
0000ba  ea200701          BIC      r7,r0,r1              ;863
0000be  8a28              LDRH     r0,[r5,#0x10]         ;864
0000c0  42b8              CMP      r0,r7                 ;864
0000c2  d109              BNE      |L8.216|
0000c4  4639              MOV      r1,r7                 ;865
0000c6  4628              MOV      r0,r5                 ;865
0000c8  f7fffffe          BL       OS_FlagTaskRdy
0000cc  4680              MOV      r8,r0                 ;865
0000ce  f1b80f01          CMP      r8,#1                 ;866
0000d2  d101              BNE      |L8.216|
0000d4  f04f0b01          MOV      r11,#1                ;867
                  |L8.216|
0000d8  e016              B        |L8.264|
                  |L8.218|
0000da  8a28              LDRH     r0,[r5,#0x10]         ;873
0000dc  8921              LDRH     r1,[r4,#8]            ;873
0000de  ea200701          BIC      r7,r0,r1              ;873
0000e2  b14f              CBZ      r7,|L8.248|
0000e4  4639              MOV      r1,r7                 ;875
0000e6  4628              MOV      r0,r5                 ;875
0000e8  f7fffffe          BL       OS_FlagTaskRdy
0000ec  4680              MOV      r8,r0                 ;875
0000ee  f1b80f01          CMP      r8,#1                 ;876
0000f2  d101              BNE      |L8.248|
0000f4  f04f0b01          MOV      r11,#1                ;877
                  |L8.248|
0000f8  e006              B        |L8.264|
                  |L8.250|
0000fa  9800              LDR      r0,[sp,#0]            ;883
0000fc  f7fffffe          BL       OS_CPU_SR_Restore
000100  206f              MOVS     r0,#0x6f              ;884
000102  7030              STRB     r0,[r6,#0]            ;884
000104  2000              MOVS     r0,#0                 ;885
000106  e789              B        |L8.28|
                  |L8.264|
000108  bf00              NOP                            ;849
00010a  682d              LDR      r5,[r5,#0]            ;887
                  |L8.268|
00010c  2d00              CMP      r5,#0                 ;839
00010e  d1a7              BNE      |L8.96|
000110  9800              LDR      r0,[sp,#0]            ;889
000112  f7fffffe          BL       OS_CPU_SR_Restore
000116  f1bb0f01          CMP      r11,#1                ;890
00011a  d101              BNE      |L8.288|
00011c  f7fffffe          BL       OS_Sched
                  |L8.288|
000120  f7fffffe          BL       OS_CPU_SR_Save
000124  9000              STR      r0,[sp,#0]            ;893
000126  8920              LDRH     r0,[r4,#8]            ;894
000128  9001              STR      r0,[sp,#4]            ;894
00012a  9800              LDR      r0,[sp,#0]            ;895
00012c  f7fffffe          BL       OS_CPU_SR_Restore
000130  2000              MOVS     r0,#0                 ;896
000132  7030              STRB     r0,[r6,#0]            ;896
000134  9801              LDR      r0,[sp,#4]            ;897
000136  e771              B        |L8.28|
;;;899    /*$PAGE*/
                          ENDP


                          AREA ||i.OSFlagQuery||, CODE, READONLY, ALIGN=1

                  OSFlagQuery PROC
;;;919    #if OS_FLAG_QUERY_EN > 0
;;;920    OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;921    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;922        OS_FLAGS   flags;
;;;923    #if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
;;;924        OS_CPU_SR  cpu_sr = 0;
000008  2700              MOVS     r7,#0
;;;925    #endif
;;;926    
;;;927    
;;;928    
;;;929    #if OS_ARG_CHK_EN > 0
;;;930        if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
;;;931            return ((OS_FLAGS)0);
;;;932        }
;;;933        if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
;;;934            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;935            return ((OS_FLAGS)0);
;;;936        }
;;;937    #endif
;;;938        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
00000a  7820              LDRB     r0,[r4,#0]
00000c  2805              CMP      r0,#5
00000e  d004              BEQ      |L9.26|
;;;939            *perr = OS_ERR_EVENT_TYPE;
000010  2001              MOVS     r0,#1
000012  7028              STRB     r0,[r5,#0]
;;;940            return ((OS_FLAGS)0);
000014  2000              MOVS     r0,#0
                  |L9.22|
;;;941        }
;;;942        OS_ENTER_CRITICAL();
;;;943        flags = pgrp->OSFlagFlags;
;;;944        OS_EXIT_CRITICAL();
;;;945        *perr = OS_ERR_NONE;
;;;946        return (flags);                               /* Return the current value of the event flags       */
;;;947    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L9.26|
00001a  f7fffffe          BL       OS_CPU_SR_Save
00001e  4607              MOV      r7,r0                 ;942
000020  8926              LDRH     r6,[r4,#8]            ;943
000022  4638              MOV      r0,r7                 ;944
000024  f7fffffe          BL       OS_CPU_SR_Restore
000028  2000              MOVS     r0,#0                 ;945
00002a  7028              STRB     r0,[r5,#0]            ;945
00002c  4630              MOV      r0,r6                 ;946
00002e  e7f2              B        |L9.22|
;;;948    #endif
                          ENDP


                          AREA ||i.OS_FlagBlock||, CODE, READONLY, ALIGN=2

                  OS_FlagBlock PROC
;;;987    
;;;988    static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
000000  b5f0              PUSH     {r4-r7,lr}
;;;989    {
000002  4614              MOV      r4,r2
000004  9e05              LDR      r6,[sp,#0x14]
;;;990        OS_FLAG_NODE  *pnode_next;
;;;991        INT8U          y;
;;;992    
;;;993    
;;;994        OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
000006  4f24              LDR      r7,|L10.152|
000008  683f              LDR      r7,[r7,#0]  ; OSTCBCur
00000a  f8977030          LDRB     r7,[r7,#0x30]
00000e  f0470720          ORR      r7,r7,#0x20
000012  f8dfc084          LDR      r12,|L10.152|
000016  f8dcc000          LDR      r12,[r12,#0]  ; OSTCBCur
00001a  f88c7030          STRB     r7,[r12,#0x30]
;;;995        OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
00001e  2700              MOVS     r7,#0
000020  f8dfc074          LDR      r12,|L10.152|
000024  f8dcc000          LDR      r12,[r12,#0]  ; OSTCBCur
000028  f88c7031          STRB     r7,[r12,#0x31]
;;;996        OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
00002c  4f1a              LDR      r7,|L10.152|
00002e  683f              LDR      r7,[r7,#0]  ; OSTCBCur
000030  85fe              STRH     r6,[r7,#0x2e]
;;;997    #if OS_TASK_DEL_EN > 0
;;;998        OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
000032  4f19              LDR      r7,|L10.152|
000034  683f              LDR      r7,[r7,#0]  ; OSTCBCur
000036  62b9              STR      r1,[r7,#0x28]
;;;999    #endif
;;;1000       pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
000038  820c              STRH     r4,[r1,#0x10]
;;;1001       pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
00003a  748b              STRB     r3,[r1,#0x12]
;;;1002       pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
00003c  4f16              LDR      r7,|L10.152|
00003e  683f              LDR      r7,[r7,#0]  ; OSTCBCur
000040  608f              STR      r7,[r1,#8]
;;;1003       pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
000042  6847              LDR      r7,[r0,#4]
000044  600f              STR      r7,[r1,#0]
;;;1004       pnode->OSFlagNodePrev     = (void *)0;
000046  2700              MOVS     r7,#0
000048  604f              STR      r7,[r1,#4]
;;;1005       pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
00004a  60c8              STR      r0,[r1,#0xc]
;;;1006       pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
00004c  6845              LDR      r5,[r0,#4]
;;;1007       if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
00004e  b105              CBZ      r5,|L10.82|
;;;1008           pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
000050  6069              STR      r1,[r5,#4]
                  |L10.82|
;;;1009       }
;;;1010       pgrp->OSFlagWaitList = (void *)pnode;
000052  6041              STR      r1,[r0,#4]
;;;1011   
;;;1012       y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
000054  4f10              LDR      r7,|L10.152|
000056  683f              LDR      r7,[r7,#0]  ; OSTCBCur
000058  f8972034          LDRB     r2,[r7,#0x34]
;;;1013       OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
00005c  4f0f              LDR      r7,|L10.156|
00005e  5cbf              LDRB     r7,[r7,r2]
000060  f8dfc034          LDR      r12,|L10.152|
000064  f8dcc000          LDR      r12,[r12,#0]  ; OSTCBCur
000068  f89cc035          LDRB     r12,[r12,#0x35]
00006c  ea27070c          BIC      r7,r7,r12
000070  f8dfc028          LDR      r12,|L10.156|
000074  f80c7002          STRB     r7,[r12,r2]
;;;1014       if (OSRdyTbl[y] == 0x00) {
000078  4667              MOV      r7,r12
00007a  5cbf              LDRB     r7,[r7,r2]
00007c  b95f              CBNZ     r7,|L10.150|
;;;1015           OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
00007e  4f06              LDR      r7,|L10.152|
000080  683f              LDR      r7,[r7,#0]  ; OSTCBCur
000082  f897c036          LDRB     r12,[r7,#0x36]
000086  4f06              LDR      r7,|L10.160|
000088  783f              LDRB     r7,[r7,#0]  ; OSRdyGrp
00008a  ea27070c          BIC      r7,r7,r12
00008e  f8dfc010          LDR      r12,|L10.160|
000092  f88c7000          STRB     r7,[r12,#0]
                  |L10.150|
;;;1016       }
;;;1017   }
000096  bdf0              POP      {r4-r7,pc}
;;;1018   
                          ENDP

                  |L10.152|
                          DCD      OSTCBCur
                  |L10.156|
                          DCD      OSRdyTbl
                  |L10.160|
                          DCD      OSRdyGrp

                          AREA ||i.OS_FlagInit||, CODE, READONLY, ALIGN=2

                  OS_FlagInit PROC
;;;1034   
;;;1035   void  OS_FlagInit (void)
000000  b570              PUSH     {r4-r6,lr}
;;;1036   {
;;;1037   #if OS_MAX_FLAGS == 1
;;;1038       OSFlagFreeList                 = (OS_FLAG_GRP *)&OSFlagTbl[0];  /* Only ONE event flag group!      */
;;;1039       OSFlagFreeList->OSFlagType     = OS_EVENT_TYPE_UNUSED;
;;;1040       OSFlagFreeList->OSFlagWaitList = (void *)0;
;;;1041       OSFlagFreeList->OSFlagFlags    = (OS_FLAGS)0;
;;;1042   #if OS_FLAG_NAME_SIZE > 1
;;;1043       OSFlagFreeList->OSFlagName[0]  = '?';
;;;1044       OSFlagFreeList->OSFlagName[1]  = OS_ASCII_NUL;
;;;1045   #endif
;;;1046   #endif
;;;1047   
;;;1048   #if OS_MAX_FLAGS >= 2
;;;1049       INT16U       i;
;;;1050       OS_FLAG_GRP *pgrp1;
;;;1051       OS_FLAG_GRP *pgrp2;
;;;1052   
;;;1053   
;;;1054       OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
000002  218c              MOVS     r1,#0x8c
000004  480f              LDR      r0,|L11.68|
000006  f7fffffe          BL       OS_MemClr
;;;1055       pgrp1 = &OSFlagTbl[0];
00000a  4c0e              LDR      r4,|L11.68|
;;;1056       pgrp2 = &OSFlagTbl[1];
00000c  f104061c          ADD      r6,r4,#0x1c
;;;1057       for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
000010  2500              MOVS     r5,#0
000012  e00a              B        |L11.42|
                  |L11.20|
;;;1058           pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
000014  2000              MOVS     r0,#0
000016  7020              STRB     r0,[r4,#0]
;;;1059           pgrp1->OSFlagWaitList = (void *)pgrp2;
000018  6066              STR      r6,[r4,#4]
;;;1060   #if OS_FLAG_NAME_SIZE > 1
;;;1061           pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
00001a  203f              MOVS     r0,#0x3f
00001c  72a0              STRB     r0,[r4,#0xa]
;;;1062           pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
00001e  2100              MOVS     r1,#0
000020  72e1              STRB     r1,[r4,#0xb]
;;;1063   #endif
;;;1064           pgrp1++;
000022  341c              ADDS     r4,r4,#0x1c
;;;1065           pgrp2++;
000024  361c              ADDS     r6,r6,#0x1c
000026  1c68              ADDS     r0,r5,#1              ;1057
000028  b285              UXTH     r5,r0                 ;1057
                  |L11.42|
00002a  2d04              CMP      r5,#4                 ;1057
00002c  dbf2              BLT      |L11.20|
;;;1066       }
;;;1067       pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
00002e  2000              MOVS     r0,#0
000030  7020              STRB     r0,[r4,#0]
;;;1068       pgrp1->OSFlagWaitList = (void *)0;
000032  6060              STR      r0,[r4,#4]
;;;1069   #if OS_FLAG_NAME_SIZE > 1
;;;1070       pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
000034  203f              MOVS     r0,#0x3f
000036  72a0              STRB     r0,[r4,#0xa]
;;;1071       pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
000038  2100              MOVS     r1,#0
00003a  72e1              STRB     r1,[r4,#0xb]
;;;1072   #endif
;;;1073       OSFlagFreeList        = &OSFlagTbl[0];
00003c  4801              LDR      r0,|L11.68|
00003e  4902              LDR      r1,|L11.72|
000040  6008              STR      r0,[r1,#0]  ; OSFlagFreeList
;;;1074   #endif
;;;1075   }
000042  bd70              POP      {r4-r6,pc}
;;;1076   
                          ENDP

                  |L11.68|
                          DCD      OSFlagTbl
                  |L11.72|
                          DCD      OSFlagFreeList

                          AREA ||i.OS_FlagTaskRdy||, CODE, READONLY, ALIGN=2

                  OS_FlagTaskRdy PROC
;;;1100   
;;;1101   static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1102   {
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
;;;1103       OS_TCB   *ptcb;
;;;1104       BOOLEAN   sched;
;;;1105   
;;;1106   
;;;1107       ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
000006  68b4              LDR      r4,[r6,#8]
;;;1108       ptcb->OSTCBDly       = 0;
000008  2000              MOVS     r0,#0
00000a  342c              ADDS     r4,r4,#0x2c
00000c  8060              STRH     r0,[r4,#2]
;;;1109       ptcb->OSTCBFlagsRdy  = flags_rdy;
00000e  8027              STRH     r7,[r4,#0]
;;;1110       ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
000010  7920              LDRB     r0,[r4,#4]
000012  f0200020          BIC      r0,r0,#0x20
000016  7120              STRB     r0,[r4,#4]
;;;1111       ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
000018  2000              MOVS     r0,#0
00001a  7160              STRB     r0,[r4,#5]
;;;1112       if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
00001c  7920              LDRB     r0,[r4,#4]
00001e  3c2c              SUBS     r4,r4,#0x2c
000020  b988              CBNZ     r0,|L12.70|
;;;1113           OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
000022  3434              ADDS     r4,r4,#0x34
000024  78a0              LDRB     r0,[r4,#2]
000026  490b              LDR      r1,|L12.84|
000028  7809              LDRB     r1,[r1,#0]  ; OSRdyGrp
00002a  4308              ORRS     r0,r0,r1
00002c  4909              LDR      r1,|L12.84|
00002e  7008              STRB     r0,[r1,#0]
;;;1114           OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
000030  7820              LDRB     r0,[r4,#0]
000032  4909              LDR      r1,|L12.88|
000034  5c08              LDRB     r0,[r1,r0]
000036  7861              LDRB     r1,[r4,#1]
000038  4308              ORRS     r0,r0,r1
00003a  f8141934          LDRB     r1,[r4],#-0x34
00003e  4a06              LDR      r2,|L12.88|
000040  5450              STRB     r0,[r2,r1]
;;;1115           sched                   = OS_TRUE;
000042  2501              MOVS     r5,#1
000044  e000              B        |L12.72|
                  |L12.70|
;;;1116       } else {
;;;1117           sched                   = OS_FALSE;
000046  2500              MOVS     r5,#0
                  |L12.72|
;;;1118       }
;;;1119       OS_FlagUnlink(pnode);
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       OS_FlagUnlink
;;;1120       return (sched);
00004e  4628              MOV      r0,r5
;;;1121   }
000050  bdf0              POP      {r4-r7,pc}
;;;1122   
                          ENDP

000052  0000              DCW      0x0000
                  |L12.84|
                          DCD      OSRdyGrp
                  |L12.88|
                          DCD      OSRdyTbl

                          AREA ||i.OS_FlagUnlink||, CODE, READONLY, ALIGN=1

                  OS_FlagUnlink PROC
;;;1144   
;;;1145   void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
000000  b530              PUSH     {r4,r5,lr}
;;;1146   {
000002  4601              MOV      r1,r0
;;;1147   #if OS_TASK_DEL_EN > 0
;;;1148       OS_TCB       *ptcb;
;;;1149   #endif
;;;1150       OS_FLAG_GRP  *pgrp;
;;;1151       OS_FLAG_NODE *pnode_prev;
;;;1152       OS_FLAG_NODE *pnode_next;
;;;1153   
;;;1154   
;;;1155       pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
000004  684a              LDR      r2,[r1,#4]
;;;1156       pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
000006  6808              LDR      r0,[r1,#0]
;;;1157       if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
000008  b92a              CBNZ     r2,|L13.22|
;;;1158           pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
00000a  68cc              LDR      r4,[r1,#0xc]
;;;1159           pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
00000c  6060              STR      r0,[r4,#4]
;;;1160           if (pnode_next != (OS_FLAG_NODE *)0) {
00000e  b128              CBZ      r0,|L13.28|
;;;1161               pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
000010  2500              MOVS     r5,#0
000012  6045              STR      r5,[r0,#4]
000014  e002              B        |L13.28|
                  |L13.22|
;;;1162           }
;;;1163       } else {                                                    /* No,  A node somewhere in the list   */
;;;1164           pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
000016  6010              STR      r0,[r2,#0]
;;;1165           if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
000018  b100              CBZ      r0,|L13.28|
;;;1166               pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
00001a  6042              STR      r2,[r0,#4]
                  |L13.28|
;;;1167           }
;;;1168       }
;;;1169   #if OS_TASK_DEL_EN > 0
;;;1170       ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
00001c  688b              LDR      r3,[r1,#8]
;;;1171       ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
00001e  2500              MOVS     r5,#0
000020  629d              STR      r5,[r3,#0x28]
;;;1172   #endif
;;;1173   }
000022  bd30              POP      {r4,r5,pc}
;;;1174   #endif
                          ENDP

