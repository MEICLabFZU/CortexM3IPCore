; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\ds18b20.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ds18b20.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\include -I.\TTS -I.\OLED -I.\ucosii\config -I.\ucosii\port -I.\ucosii\source -I.\RTE\_Target_1 -ID:\Coding\MDKeil\ARM\PACK\ARM\CMSIS\5.4.0\Device\ARM\ARMCM3\Include -ID:\Coding\MDKeil\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DARMCM3 --omf_browse=.\objects\ds18b20.crf src\ds18b20.c]
                          THUMB

                          AREA ||i.ds18b20init||, CODE, READONLY, ALIGN=2

                  ds18b20init PROC
;;;2      
;;;3      void   ds18b20init()
000000  b510              PUSH     {r4,lr}
;;;4      {
;;;5      	bit_set(GPIO_DDR, GPIO_PIN_0, 0x01);	  
000002  2201              MOVS     r2,#1
000004  4611              MOV      r1,r2
000006  480b              LDR      r0,|L1.52|
000008  f7fffffe          BL       bit_set
;;;6      	bit_set(GPIO_DR, GPIO_PIN_0, 0x00);
00000c  2200              MOVS     r2,#0
00000e  2101              MOVS     r1,#1
000010  0788              LSLS     r0,r1,#30
000012  f7fffffe          BL       bit_set
;;;7      	delay_us(500);
000016  f44f70fa          MOV      r0,#0x1f4
00001a  f7fffffe          BL       delay_us
;;;8      	bit_set(GPIO_DDR, GPIO_PIN_0, 0x00);	
00001e  2200              MOVS     r2,#0
000020  2101              MOVS     r1,#1
000022  4804              LDR      r0,|L1.52|
000024  f7fffffe          BL       bit_set
;;;9      	delay_us(500);
000028  f44f70fa          MOV      r0,#0x1f4
00002c  f7fffffe          BL       delay_us
;;;10     }
000030  bd10              POP      {r4,pc}
;;;11     
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      0x40000004

                          AREA ||i.ds18b20rd||, CODE, READONLY, ALIGN=2

                  ds18b20rd PROC
;;;35     
;;;36     uint8_t ds18b20rd()
000000  b570              PUSH     {r4-r6,lr}
;;;37     {
;;;38     	uint8_t i=0,value=0;
000002  2500              MOVS     r5,#0
000004  2400              MOVS     r4,#0
;;;39     	for(i=0;i<8;i++)
000006  bf00              NOP      
000008  e022              B        |L2.80|
                  |L2.10|
;;;40     	{
;;;41     		value>>=1;
00000a  1064              ASRS     r4,r4,#1
;;;42     		bit_set(GPIO_DDR, GPIO_PIN_0, 0x01); // ‰≥ˆ≈‰÷√
00000c  2201              MOVS     r2,#1
00000e  4611              MOV      r1,r2
000010  4811              LDR      r0,|L2.88|
000012  f7fffffe          BL       bit_set
;;;43     		bit_set(GPIO_DR, GPIO_PIN_0, 0x00);
000016  2200              MOVS     r2,#0
000018  2101              MOVS     r1,#1
00001a  0788              LSLS     r0,r1,#30
00001c  f7fffffe          BL       bit_set
;;;44     		delay_us(4);
000020  2004              MOVS     r0,#4
000022  f7fffffe          BL       delay_us
;;;45     		bit_set(GPIO_DDR, GPIO_PIN_0, 0x00);	  // ‰»Î≈‰÷√
000026  2200              MOVS     r2,#0
000028  2101              MOVS     r1,#1
00002a  480b              LDR      r0,|L2.88|
00002c  f7fffffe          BL       bit_set
;;;46     		delay_us(10);	
000030  200a              MOVS     r0,#0xa
000032  f7fffffe          BL       delay_us
;;;47     		if(((*GPIO_EXT) & (0x01))== 0x01)
000036  4808              LDR      r0,|L2.88|
000038  304c              ADDS     r0,r0,#0x4c
00003a  7800              LDRB     r0,[r0,#0]
00003c  f0000001          AND      r0,r0,#1
000040  b108              CBZ      r0,|L2.70|
;;;48     		{
;;;49     			value|=0x80;
000042  f0440480          ORR      r4,r4,#0x80
                  |L2.70|
;;;50     		}
;;;51     		delay_us(60);	
000046  203c              MOVS     r0,#0x3c
000048  f7fffffe          BL       delay_us
00004c  1c68              ADDS     r0,r5,#1              ;39
00004e  b2c5              UXTB     r5,r0                 ;39
                  |L2.80|
000050  2d08              CMP      r5,#8                 ;39
000052  dbda              BLT      |L2.10|
;;;52     	}
;;;53     	return value;
000054  4620              MOV      r0,r4
;;;54     }
000056  bd70              POP      {r4-r6,pc}
;;;55     
                          ENDP

                  |L2.88|
                          DCD      0x40000004

                          AREA ||i.ds18b20wr||, CODE, READONLY, ALIGN=2

                  ds18b20wr PROC
;;;11     
;;;12     void ds18b20wr(uint8_t dat)
000000  b570              PUSH     {r4-r6,lr}
;;;13     {
000002  4604              MOV      r4,r0
;;;14     	
;;;15     	uint8_t i=0;
000004  2500              MOVS     r5,#0
;;;16     	bit_set(GPIO_DDR, GPIO_PIN_0, 0x01);	  
000006  2201              MOVS     r2,#1
000008  4611              MOV      r1,r2
00000a  4814              LDR      r0,|L3.92|
00000c  f7fffffe          BL       bit_set
;;;17     	for(i=0;i<8;i++)
000010  bf00              NOP      
000012  e020              B        |L3.86|
                  |L3.20|
;;;18     	{
;;;19     		bit_set(GPIO_DR, GPIO_PIN_0, 0x00);
000014  2200              MOVS     r2,#0
000016  2101              MOVS     r1,#1
000018  0788              LSLS     r0,r1,#30
00001a  f7fffffe          BL       bit_set
;;;20     		delay_us(10);					
00001e  200a              MOVS     r0,#0xa
000020  f7fffffe          BL       delay_us
;;;21     		
;;;22     		if((dat&0x01)==1)
000024  f0040001          AND      r0,r4,#1
000028  b128              CBZ      r0,|L3.54|
;;;23     		{
;;;24     		   	bit_set(GPIO_DR, GPIO_PIN_0, 0x01);
00002a  2201              MOVS     r2,#1
00002c  4611              MOV      r1,r2
00002e  0790              LSLS     r0,r2,#30
000030  f7fffffe          BL       bit_set
000034  e004              B        |L3.64|
                  |L3.54|
;;;25     		}
;;;26     		else
;;;27     		{
;;;28     			bit_set(GPIO_DR, GPIO_PIN_0, 0x00);	
000036  2200              MOVS     r2,#0
000038  2101              MOVS     r1,#1
00003a  0788              LSLS     r0,r1,#30
00003c  f7fffffe          BL       bit_set
                  |L3.64|
;;;29     		}
;;;30     		delay_us(60);
000040  203c              MOVS     r0,#0x3c
000042  f7fffffe          BL       delay_us
;;;31     		bit_set(GPIO_DR, GPIO_PIN_0, 0x01);
000046  2201              MOVS     r2,#1
000048  4611              MOV      r1,r2
00004a  0790              LSLS     r0,r2,#30
00004c  f7fffffe          BL       bit_set
;;;32     		dat>>=1;
000050  1064              ASRS     r4,r4,#1
000052  1c68              ADDS     r0,r5,#1              ;17
000054  b2c5              UXTB     r5,r0                 ;17
                  |L3.86|
000056  2d08              CMP      r5,#8                 ;17
000058  dbdc              BLT      |L3.20|
;;;33     	}
;;;34     }
00005a  bd70              POP      {r4-r6,pc}
;;;35     
                          ENDP

                  |L3.92|
                          DCD      0x40000004

                          AREA ||i.readtemp||, CODE, READONLY, ALIGN=2

                  readtemp PROC
;;;55     
;;;56     double readtemp()
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;57     {
;;;58     	uint8_t a,b;
;;;59     	uint16_t temp;
;;;60     	double value;
;;;61     	ds18b20init();
000004  f7fffffe          BL       ds18b20init
;;;62     	ds18b20wr(0xcc);
000008  20cc              MOVS     r0,#0xcc
00000a  f7fffffe          BL       ds18b20wr
;;;63     	ds18b20wr(0x44);
00000e  2044              MOVS     r0,#0x44
000010  f7fffffe          BL       ds18b20wr
;;;64     	delay_ms(400);
000014  f44f70c8          MOV      r0,#0x190
000018  f7fffffe          BL       delay_ms
;;;65     	delay_ms(400);
00001c  f44f70c8          MOV      r0,#0x190
000020  f7fffffe          BL       delay_ms
;;;66     	
;;;67     	ds18b20init();
000024  f7fffffe          BL       ds18b20init
;;;68     	ds18b20wr(0xcc);
000028  20cc              MOVS     r0,#0xcc
00002a  f7fffffe          BL       ds18b20wr
;;;69     	ds18b20wr(0xbe);
00002e  20be              MOVS     r0,#0xbe
000030  f7fffffe          BL       ds18b20wr
;;;70     	a=ds18b20rd();
000034  f7fffffe          BL       ds18b20rd
000038  4682              MOV      r10,r0
;;;71     	b=ds18b20rd();
00003a  f7fffffe          BL       ds18b20rd
00003e  4681              MOV      r9,r0
;;;72     	temp=b;
000040  464c              MOV      r4,r9
;;;73     	temp=(temp<<8)+a;
000042  eb0a2004          ADD      r0,r10,r4,LSL #8
000046  b284              UXTH     r4,r0
;;;74     	if((temp&0xf800)==0xf800)
000048  f4044078          AND      r0,r4,#0xf800
00004c  f5b04f78          CMP      r0,#0xf800
000050  d10d              BNE      |L4.110|
;;;75     	{
;;;76     		temp=(~temp)+1;
000052  43e0              MVNS     r0,r4
000054  1c40              ADDS     r0,r0,#1
000056  b284              UXTH     r4,r0
;;;77     		value=temp*(-0.0625);
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       __aeabi_ui2d
00005e  4607              MOV      r7,r0
000060  2200              MOVS     r2,#0
000062  4b0a              LDR      r3,|L4.140|
000064  f7fffffe          BL       __aeabi_dmul
000068  4605              MOV      r5,r0
00006a  460e              MOV      r6,r1
00006c  e009              B        |L4.130|
                  |L4.110|
;;;78     	}
;;;79     	else
;;;80     	{
;;;81     		value=temp*(0.0625);	
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       __aeabi_ui2d
000074  4607              MOV      r7,r0
000076  2200              MOVS     r2,#0
000078  4b05              LDR      r3,|L4.144|
00007a  f7fffffe          BL       __aeabi_dmul
00007e  4605              MOV      r5,r0
000080  460e              MOV      r6,r1
                  |L4.130|
;;;82     	}
;;;83     	return value;				
000082  4628              MOV      r0,r5
000084  4631              MOV      r1,r6
;;;84     }
000086  e8bd87f0          POP      {r4-r10,pc}
                          ENDP

00008a  0000              DCW      0x0000
                  |L4.140|
                          DCD      0xbfb00000
                  |L4.144|
                          DCD      0x3fb00000

;*** Start embedded assembler ***

#line 1 "src\\ds18b20.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_ds18b20_c_ea1c8e10____REV16|
#line 129 ".\\include\\core_cmInstr.h"
|__asm___9_ds18b20_c_ea1c8e10____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_ds18b20_c_ea1c8e10____REVSH|
#line 144
|__asm___9_ds18b20_c_ea1c8e10____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
