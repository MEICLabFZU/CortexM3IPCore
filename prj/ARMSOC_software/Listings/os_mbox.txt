; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\os_mbox.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\os_mbox.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\include -I.\TTS -I.\OLED -I.\ucosii\config -I.\ucosii\port -I.\ucosii\source -I.\RTE\_Target_1 -ID:\Coding\MDKeil\ARM\PACK\ARM\CMSIS\5.4.0\Device\ARM\ARMCM3\Include -ID:\Coding\MDKeil\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DARMCM3 --omf_browse=.\objects\os_mbox.crf ucosii\source\os_mbox.c]
                          THUMB

                          AREA ||i.OSMboxAccept||, CODE, READONLY, ALIGN=1

                  OSMboxAccept PROC
;;;46     #if OS_MBOX_ACCEPT_EN > 0
;;;47     void  *OSMboxAccept (OS_EVENT *pevent)
000000  b570              PUSH     {r4-r6,lr}
;;;48     {
000002  4604              MOV      r4,r0
;;;49         void      *pmsg;
;;;50     #if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
;;;51         OS_CPU_SR  cpu_sr = 0;
000004  2600              MOVS     r6,#0
;;;52     #endif
;;;53     
;;;54     
;;;55     
;;;56     #if OS_ARG_CHK_EN > 0
;;;57         if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
;;;58             return ((void *)0);
;;;59         }
;;;60     #endif
;;;61         if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
000006  7820              LDRB     r0,[r4,#0]
000008  2801              CMP      r0,#1
00000a  d001              BEQ      |L1.16|
;;;62             return ((void *)0);
00000c  2000              MOVS     r0,#0
                  |L1.14|
;;;63         }
;;;64         OS_ENTER_CRITICAL();
;;;65         pmsg               = pevent->OSEventPtr;
;;;66         pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
;;;67         OS_EXIT_CRITICAL();
;;;68         return (pmsg);                                        /* Return the message received (or NULL)     */
;;;69     }
00000e  bd70              POP      {r4-r6,pc}
                  |L1.16|
000010  f7fffffe          BL       OS_CPU_SR_Save
000014  4606              MOV      r6,r0                 ;64
000016  6865              LDR      r5,[r4,#4]            ;65
000018  2000              MOVS     r0,#0                 ;66
00001a  6060              STR      r0,[r4,#4]            ;66
00001c  4630              MOV      r0,r6                 ;67
00001e  f7fffffe          BL       OS_CPU_SR_Restore
000022  4628              MOV      r0,r5                 ;68
000024  e7f3              B        |L1.14|
;;;70     #endif
                          ENDP


                          AREA ||i.OSMboxCreate||, CODE, READONLY, ALIGN=2

                  OSMboxCreate PROC
;;;87     
;;;88     OS_EVENT  *OSMboxCreate (void *pmsg)
000000  b570              PUSH     {r4-r6,lr}
;;;89     {
000002  4605              MOV      r5,r0
;;;90         OS_EVENT  *pevent;
;;;91     #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;92         OS_CPU_SR  cpu_sr = 0;
000004  2600              MOVS     r6,#0
;;;93     #endif
;;;94     
;;;95     
;;;96     
;;;97         if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
000006  4812              LDR      r0,|L2.80|
000008  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000a  2800              CMP      r0,#0
00000c  dd01              BLE      |L2.18|
;;;98             return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
00000e  2000              MOVS     r0,#0
                  |L2.16|
;;;99         }
;;;100        OS_ENTER_CRITICAL();
;;;101        pevent = OSEventFreeList;                    /* Get next free event control block                  */
;;;102        if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
;;;103            OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
;;;104        }
;;;105        OS_EXIT_CRITICAL();
;;;106        if (pevent != (OS_EVENT *)0) {
;;;107            pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
;;;108            pevent->OSEventCnt     = 0;
;;;109            pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
;;;110    #if OS_EVENT_NAME_SIZE > 1
;;;111            pevent->OSEventName[0] = '?';
;;;112            pevent->OSEventName[1] = OS_ASCII_NUL;
;;;113    #endif
;;;114            OS_EventWaitListInit(pevent);
;;;115        }
;;;116        return (pevent);                             /* Return pointer to event control block              */
;;;117    }
000010  bd70              POP      {r4-r6,pc}
                  |L2.18|
000012  f7fffffe          BL       OS_CPU_SR_Save
000016  4606              MOV      r6,r0                 ;100
000018  480e              LDR      r0,|L2.84|
00001a  6804              LDR      r4,[r0,#0]            ;101  ; OSEventFreeList
00001c  6800              LDR      r0,[r0,#0]            ;102  ; OSEventFreeList
00001e  b120              CBZ      r0,|L2.42|
000020  480c              LDR      r0,|L2.84|
000022  6800              LDR      r0,[r0,#0]            ;103  ; OSEventFreeList
000024  6840              LDR      r0,[r0,#4]            ;103
000026  490b              LDR      r1,|L2.84|
000028  6008              STR      r0,[r1,#0]            ;103  ; OSEventFreeList
                  |L2.42|
00002a  4630              MOV      r0,r6                 ;105
00002c  f7fffffe          BL       OS_CPU_SR_Restore
000030  b15c              CBZ      r4,|L2.74|
000032  2001              MOVS     r0,#1                 ;107
000034  7020              STRB     r0,[r4,#0]            ;107
000036  2000              MOVS     r0,#0                 ;108
000038  8120              STRH     r0,[r4,#8]            ;108
00003a  6065              STR      r5,[r4,#4]            ;109
00003c  203f              MOVS     r0,#0x3f              ;111
00003e  73e0              STRB     r0,[r4,#0xf]          ;111
000040  2100              MOVS     r1,#0                 ;112
000042  7421              STRB     r1,[r4,#0x10]         ;112
000044  4620              MOV      r0,r4                 ;114
000046  f7fffffe          BL       OS_EventWaitListInit
                  |L2.74|
00004a  4620              MOV      r0,r4                 ;116
00004c  e7e0              B        |L2.16|
;;;118    /*$PAGE*/
                          ENDP

00004e  0000              DCW      0x0000
                  |L2.80|
                          DCD      OSIntNesting
                  |L2.84|
                          DCD      OSEventFreeList

                          AREA ||i.OSMboxDel||, CODE, READONLY, ALIGN=2

                  OSMboxDel PROC
;;;155    #if OS_MBOX_DEL_EN > 0
;;;156    OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;157    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
;;;158        BOOLEAN    tasks_waiting;
;;;159        OS_EVENT  *pevent_return;
;;;160    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;161        OS_CPU_SR  cpu_sr = 0;
00000a  f04f0900          MOV      r9,#0
;;;162    #endif
;;;163    
;;;164    
;;;165    
;;;166    #if OS_ARG_CHK_EN > 0
;;;167        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
;;;168            return (pevent);
;;;169        }
;;;170        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;171            *perr = OS_ERR_PEVENT_NULL;
;;;172            return (pevent);
;;;173        }
;;;174    #endif
;;;175        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
00000e  7820              LDRB     r0,[r4,#0]
000010  2801              CMP      r0,#1
000012  d004              BEQ      |L3.30|
;;;176            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7028              STRB     r0,[r5,#0]
;;;177            return (pevent);
000018  4620              MOV      r0,r4
                  |L3.26|
;;;178        }
;;;179        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;180            *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
;;;181            return (pevent);
;;;182        }
;;;183        OS_ENTER_CRITICAL();
;;;184        if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
;;;185            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;186        } else {
;;;187            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;188        }
;;;189        switch (opt) {
;;;190            case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
;;;191                 if (tasks_waiting == OS_FALSE) {
;;;192    #if OS_EVENT_NAME_SIZE > 1
;;;193                     pevent->OSEventName[0] = '?';             /* Unknown name                             */
;;;194                     pevent->OSEventName[1] = OS_ASCII_NUL;
;;;195    #endif
;;;196                     pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
;;;197                     pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
;;;198                     pevent->OSEventCnt  = 0;
;;;199                     OSEventFreeList     = pevent;             /* Get next free event control block        */
;;;200                     OS_EXIT_CRITICAL();
;;;201                     *perr               = OS_ERR_NONE;
;;;202                     pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
;;;203                 } else {
;;;204                     OS_EXIT_CRITICAL();
;;;205                     *perr               = OS_ERR_TASK_WAITING;
;;;206                     pevent_return       = pevent;
;;;207                 }
;;;208                 break;
;;;209    
;;;210            case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
;;;211                 while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
;;;212                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;213                 }
;;;214    #if OS_EVENT_NAME_SIZE > 1
;;;215                 pevent->OSEventName[0] = '?';                 /* Unknown name                             */
;;;216                 pevent->OSEventName[1] = OS_ASCII_NUL;
;;;217    #endif
;;;218                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;219                 pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
;;;220                 pevent->OSEventCnt     = 0;
;;;221                 OSEventFreeList        = pevent;              /* Get next free event control block        */
;;;222                 OS_EXIT_CRITICAL();
;;;223                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;224                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;225                 }
;;;226                 *perr         = OS_ERR_NONE;
;;;227                 pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
;;;228                 break;
;;;229    
;;;230            default:
;;;231                 OS_EXIT_CRITICAL();
;;;232                 *perr         = OS_ERR_INVALID_OPT;
;;;233                 pevent_return = pevent;
;;;234                 break;
;;;235        }
;;;236        return (pevent_return);
;;;237    }
00001a  e8bd87f0          POP      {r4-r10,pc}
                  |L3.30|
00001e  482f              LDR      r0,|L3.220|
000020  7800              LDRB     r0,[r0,#0]            ;179  ; OSIntNesting
000022  2800              CMP      r0,#0                 ;179
000024  dd03              BLE      |L3.46|
000026  200f              MOVS     r0,#0xf               ;180
000028  7028              STRB     r0,[r5,#0]            ;180
00002a  4620              MOV      r0,r4                 ;181
00002c  e7f5              B        |L3.26|
                  |L3.46|
00002e  f7fffffe          BL       OS_CPU_SR_Save
000032  4681              MOV      r9,r0                 ;183
000034  7aa0              LDRB     r0,[r4,#0xa]          ;184
000036  b108              CBZ      r0,|L3.60|
000038  2701              MOVS     r7,#1                 ;185
00003a  e000              B        |L3.62|
                  |L3.60|
00003c  2700              MOVS     r7,#0                 ;187
                  |L3.62|
00003e  f1b80f00          CMP      r8,#0                 ;189
000042  d003              BEQ      |L3.76|
000044  f1b80f01          CMP      r8,#1                 ;189
000048  d13e              BNE      |L3.200|
00004a  e01b              B        |L3.132|
                  |L3.76|
00004c  b99f              CBNZ     r7,|L3.118|
00004e  203f              MOVS     r0,#0x3f              ;193
000050  73e0              STRB     r0,[r4,#0xf]          ;193
000052  2100              MOVS     r1,#0                 ;194
000054  7421              STRB     r1,[r4,#0x10]         ;194
000056  2000              MOVS     r0,#0                 ;196
000058  7020              STRB     r0,[r4,#0]            ;196
00005a  4821              LDR      r0,|L3.224|
00005c  6800              LDR      r0,[r0,#0]            ;197  ; OSEventFreeList
00005e  6060              STR      r0,[r4,#4]            ;197
000060  2000              MOVS     r0,#0                 ;198
000062  8120              STRH     r0,[r4,#8]            ;198
000064  481e              LDR      r0,|L3.224|
000066  6004              STR      r4,[r0,#0]            ;199  ; OSEventFreeList
000068  4648              MOV      r0,r9                 ;200
00006a  f7fffffe          BL       OS_CPU_SR_Restore
00006e  2000              MOVS     r0,#0                 ;201
000070  7028              STRB     r0,[r5,#0]            ;201
000072  2600              MOVS     r6,#0                 ;202
000074  e005              B        |L3.130|
                  |L3.118|
000076  4648              MOV      r0,r9                 ;204
000078  f7fffffe          BL       OS_CPU_SR_Restore
00007c  2049              MOVS     r0,#0x49              ;205
00007e  7028              STRB     r0,[r5,#0]            ;205
000080  4626              MOV      r6,r4                 ;206
                  |L3.130|
000082  e028              B        |L3.214|
                  |L3.132|
000084  e005              B        |L3.146|
                  |L3.134|
000086  2300              MOVS     r3,#0                 ;212
000088  2202              MOVS     r2,#2                 ;212
00008a  4619              MOV      r1,r3                 ;212
00008c  4620              MOV      r0,r4                 ;212
00008e  f7fffffe          BL       OS_EventTaskRdy
                  |L3.146|
000092  7aa0              LDRB     r0,[r4,#0xa]          ;211
000094  2800              CMP      r0,#0                 ;211
000096  d1f6              BNE      |L3.134|
000098  203f              MOVS     r0,#0x3f              ;215
00009a  73e0              STRB     r0,[r4,#0xf]          ;215
00009c  2100              MOVS     r1,#0                 ;216
00009e  7421              STRB     r1,[r4,#0x10]         ;216
0000a0  2000              MOVS     r0,#0                 ;218
0000a2  7020              STRB     r0,[r4,#0]            ;218
0000a4  480e              LDR      r0,|L3.224|
0000a6  6800              LDR      r0,[r0,#0]            ;219  ; OSEventFreeList
0000a8  6060              STR      r0,[r4,#4]            ;219
0000aa  2000              MOVS     r0,#0                 ;220
0000ac  8120              STRH     r0,[r4,#8]            ;220
0000ae  480c              LDR      r0,|L3.224|
0000b0  6004              STR      r4,[r0,#0]            ;221  ; OSEventFreeList
0000b2  4648              MOV      r0,r9                 ;222
0000b4  f7fffffe          BL       OS_CPU_SR_Restore
0000b8  2f01              CMP      r7,#1                 ;223
0000ba  d101              BNE      |L3.192|
0000bc  f7fffffe          BL       OS_Sched
                  |L3.192|
0000c0  2000              MOVS     r0,#0                 ;226
0000c2  7028              STRB     r0,[r5,#0]            ;226
0000c4  2600              MOVS     r6,#0                 ;227
0000c6  e006              B        |L3.214|
                  |L3.200|
0000c8  4648              MOV      r0,r9                 ;231
0000ca  f7fffffe          BL       OS_CPU_SR_Restore
0000ce  2007              MOVS     r0,#7                 ;232
0000d0  7028              STRB     r0,[r5,#0]            ;232
0000d2  4626              MOV      r6,r4                 ;233
0000d4  bf00              NOP                            ;234
                  |L3.214|
0000d6  bf00              NOP                            ;208
0000d8  4630              MOV      r0,r6                 ;236
0000da  e79e              B        |L3.26|
;;;238    #endif
                          ENDP

                  |L3.220|
                          DCD      OSIntNesting
                  |L3.224|
                          DCD      OSEventFreeList

                          AREA ||i.OSMboxPend||, CODE, READONLY, ALIGN=2

                  OSMboxPend PROC
;;;273    /*$PAGE*/
;;;274    void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;275    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;276        void      *pmsg;
;;;277    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;278        OS_CPU_SR  cpu_sr = 0;
00000a  f04f0800          MOV      r8,#0
;;;279    #endif
;;;280    
;;;281    
;;;282    
;;;283    #if OS_ARG_CHK_EN > 0
;;;284        if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
;;;285            return ((void *)0);
;;;286        }
;;;287        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;288            *perr = OS_ERR_PEVENT_NULL;
;;;289            return ((void *)0);
;;;290        }
;;;291    #endif
;;;292        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
00000e  7828              LDRB     r0,[r5,#0]
000010  2801              CMP      r0,#1
000012  d004              BEQ      |L4.30|
;;;293            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7020              STRB     r0,[r4,#0]
;;;294            return ((void *)0);
000018  2000              MOVS     r0,#0
                  |L4.26|
;;;295        }
;;;296        if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
;;;297            *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
;;;298            return ((void *)0);
;;;299        }
;;;300        if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
;;;301            *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
;;;302            return ((void *)0);
;;;303        }
;;;304        OS_ENTER_CRITICAL();
;;;305        pmsg = pevent->OSEventPtr;
;;;306        if (pmsg != (void *)0) {                          /* See if there is already a message             */
;;;307            pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
;;;308            OS_EXIT_CRITICAL();
;;;309            *perr = OS_ERR_NONE;
;;;310            return (pmsg);                                /* Return the message received (or NULL)         */
;;;311        }
;;;312        OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
;;;313        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;314        OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
;;;315        OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
;;;316        OS_EXIT_CRITICAL();
;;;317        OS_Sched();                                       /* Find next highest priority task ready to run  */
;;;318        OS_ENTER_CRITICAL();
;;;319        switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
;;;320            case OS_STAT_PEND_OK:
;;;321                 pmsg =  OSTCBCur->OSTCBMsg;
;;;322                *perr =  OS_ERR_NONE;
;;;323                 break;
;;;324    
;;;325            case OS_STAT_PEND_ABORT:
;;;326                 pmsg = (void *)0;
;;;327                *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
;;;328                 break;
;;;329    
;;;330            case OS_STAT_PEND_TO:
;;;331            default:
;;;332                 OS_EventTaskRemove(OSTCBCur, pevent);
;;;333                 pmsg = (void *)0;
;;;334                *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
;;;335                 break;
;;;336        }
;;;337        OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
;;;338        OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
;;;339        OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
;;;340    #if (OS_EVENT_MULTI_EN > 0)
;;;341        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
;;;342    #endif
;;;343        OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
;;;344        OS_EXIT_CRITICAL();
;;;345        return (pmsg);                                    /* Return received message                       */
;;;346    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L4.30|
00001e  4838              LDR      r0,|L4.256|
000020  7800              LDRB     r0,[r0,#0]            ;296  ; OSIntNesting
000022  2800              CMP      r0,#0                 ;296
000024  dd03              BLE      |L4.46|
000026  2002              MOVS     r0,#2                 ;297
000028  7020              STRB     r0,[r4,#0]            ;297
00002a  2000              MOVS     r0,#0                 ;298
00002c  e7f5              B        |L4.26|
                  |L4.46|
00002e  4835              LDR      r0,|L4.260|
000030  7800              LDRB     r0,[r0,#0]            ;300  ; OSLockNesting
000032  2800              CMP      r0,#0                 ;300
000034  dd03              BLE      |L4.62|
000036  200d              MOVS     r0,#0xd               ;301
000038  7020              STRB     r0,[r4,#0]            ;301
00003a  2000              MOVS     r0,#0                 ;302
00003c  e7ed              B        |L4.26|
                  |L4.62|
00003e  f7fffffe          BL       OS_CPU_SR_Save
000042  4680              MOV      r8,r0                 ;304
000044  686e              LDR      r6,[r5,#4]            ;305
000046  b146              CBZ      r6,|L4.90|
000048  2000              MOVS     r0,#0                 ;307
00004a  6068              STR      r0,[r5,#4]            ;307
00004c  4640              MOV      r0,r8                 ;308
00004e  f7fffffe          BL       OS_CPU_SR_Restore
000052  2000              MOVS     r0,#0                 ;309
000054  7020              STRB     r0,[r4,#0]            ;309
000056  4630              MOV      r0,r6                 ;310
000058  e7df              B        |L4.26|
                  |L4.90|
00005a  482b              LDR      r0,|L4.264|
00005c  6800              LDR      r0,[r0,#0]            ;312  ; OSTCBCur
00005e  f8900030          LDRB     r0,[r0,#0x30]         ;312
000062  f0400002          ORR      r0,r0,#2              ;312
000066  4928              LDR      r1,|L4.264|
000068  6809              LDR      r1,[r1,#0]            ;312  ; OSTCBCur
00006a  f8810030          STRB     r0,[r1,#0x30]         ;312
00006e  2000              MOVS     r0,#0                 ;313
000070  4925              LDR      r1,|L4.264|
000072  6809              LDR      r1,[r1,#0]            ;313  ; OSTCBCur
000074  f8810031          STRB     r0,[r1,#0x31]         ;313
000078  4823              LDR      r0,|L4.264|
00007a  6800              LDR      r0,[r0,#0]            ;314  ; OSTCBCur
00007c  85c7              STRH     r7,[r0,#0x2e]         ;314
00007e  4628              MOV      r0,r5                 ;315
000080  f7fffffe          BL       OS_EventTaskWait
000084  4640              MOV      r0,r8                 ;316
000086  f7fffffe          BL       OS_CPU_SR_Restore
00008a  f7fffffe          BL       OS_Sched
00008e  f7fffffe          BL       OS_CPU_SR_Save
000092  4680              MOV      r8,r0                 ;318
000094  481c              LDR      r0,|L4.264|
000096  6800              LDR      r0,[r0,#0]            ;319  ; OSTCBCur
000098  f8900031          LDRB     r0,[r0,#0x31]         ;319
00009c  b120              CBZ      r0,|L4.168|
00009e  2801              CMP      r0,#1                 ;319
0000a0  d00d              BEQ      |L4.190|
0000a2  2802              CMP      r0,#2                 ;319
0000a4  d10a              BNE      |L4.188|
0000a6  e005              B        |L4.180|
                  |L4.168|
0000a8  4817              LDR      r0,|L4.264|
0000aa  6800              LDR      r0,[r0,#0]            ;321  ; OSTCBCur
0000ac  6a46              LDR      r6,[r0,#0x24]         ;321
0000ae  2000              MOVS     r0,#0                 ;322
0000b0  7020              STRB     r0,[r4,#0]            ;322
0000b2  e00d              B        |L4.208|
                  |L4.180|
0000b4  2600              MOVS     r6,#0                 ;326
0000b6  200e              MOVS     r0,#0xe               ;327
0000b8  7020              STRB     r0,[r4,#0]            ;327
0000ba  e009              B        |L4.208|
                  |L4.188|
0000bc  bf00              NOP                            ;330
                  |L4.190|
0000be  4629              MOV      r1,r5                 ;332
0000c0  4811              LDR      r0,|L4.264|
0000c2  6800              LDR      r0,[r0,#0]            ;332  ; OSTCBCur
0000c4  f7fffffe          BL       OS_EventTaskRemove
0000c8  2600              MOVS     r6,#0                 ;333
0000ca  200a              MOVS     r0,#0xa               ;334
0000cc  7020              STRB     r0,[r4,#0]            ;334
0000ce  bf00              NOP                            ;335
                  |L4.208|
0000d0  bf00              NOP                            ;323
0000d2  2000              MOVS     r0,#0                 ;337
0000d4  490c              LDR      r1,|L4.264|
0000d6  6809              LDR      r1,[r1,#0]            ;337  ; OSTCBCur
0000d8  f8810030          STRB     r0,[r1,#0x30]         ;337
0000dc  490a              LDR      r1,|L4.264|
0000de  6809              LDR      r1,[r1,#0]            ;338  ; OSTCBCur
0000e0  f8810031          STRB     r0,[r1,#0x31]         ;338
0000e4  4908              LDR      r1,|L4.264|
0000e6  6809              LDR      r1,[r1,#0]            ;339  ; OSTCBCur
0000e8  61c8              STR      r0,[r1,#0x1c]         ;339
0000ea  4907              LDR      r1,|L4.264|
0000ec  6809              LDR      r1,[r1,#0]            ;341  ; OSTCBCur
0000ee  6208              STR      r0,[r1,#0x20]         ;341
0000f0  4905              LDR      r1,|L4.264|
0000f2  6809              LDR      r1,[r1,#0]            ;343  ; OSTCBCur
0000f4  6248              STR      r0,[r1,#0x24]         ;343
0000f6  4640              MOV      r0,r8                 ;344
0000f8  f7fffffe          BL       OS_CPU_SR_Restore
0000fc  4630              MOV      r0,r6                 ;345
0000fe  e78c              B        |L4.26|
;;;347    /*$PAGE*/
                          ENDP

                  |L4.256|
                          DCD      OSIntNesting
                  |L4.260|
                          DCD      OSLockNesting
                  |L4.264|
                          DCD      OSTCBCur

                          AREA ||i.OSMboxPendAbort||, CODE, READONLY, ALIGN=1

                  OSMboxPendAbort PROC
;;;380    #if OS_MBOX_PEND_ABORT_EN > 0
;;;381    INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;382    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;383        INT8U      nbr_tasks;
;;;384    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;385        OS_CPU_SR  cpu_sr = 0;
00000a  f04f0800          MOV      r8,#0
;;;386    #endif
;;;387    
;;;388    
;;;389    
;;;390    #if OS_ARG_CHK_EN > 0
;;;391        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
;;;392            return (0);
;;;393        }
;;;394        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;395            *perr = OS_ERR_PEVENT_NULL;
;;;396            return (0);
;;;397        }
;;;398    #endif
;;;399        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
00000e  7820              LDRB     r0,[r4,#0]
000010  2801              CMP      r0,#1
000012  d004              BEQ      |L5.30|
;;;400            *perr = OS_ERR_EVENT_TYPE;
000014  2001              MOVS     r0,#1
000016  7028              STRB     r0,[r5,#0]
;;;401            return (0);
000018  2000              MOVS     r0,#0
                  |L5.26|
;;;402        }
;;;403        OS_ENTER_CRITICAL();
;;;404        if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
;;;405            nbr_tasks = 0;
;;;406            switch (opt) {
;;;407                case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
;;;408                     while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
;;;409                         (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
;;;410                         nbr_tasks++;
;;;411                     }
;;;412                     break;
;;;413                 
;;;414                case OS_PEND_OPT_NONE:
;;;415                default:                                       /* No,  ready HPT       waiting on mailbox  */
;;;416                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
;;;417                     nbr_tasks++;
;;;418                     break;
;;;419            }
;;;420            OS_EXIT_CRITICAL();
;;;421            OS_Sched();                                        /* Find HPT ready to run                    */
;;;422            *perr = OS_ERR_PEND_ABORT;
;;;423            return (nbr_tasks);
;;;424        }
;;;425        OS_EXIT_CRITICAL();
;;;426        *perr = OS_ERR_NONE;
;;;427        return (0);                                            /* No tasks waiting on mailbox              */
;;;428    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L5.30|
00001e  f7fffffe          BL       OS_CPU_SR_Save
000022  4680              MOV      r8,r0                 ;403
000024  7aa0              LDRB     r0,[r4,#0xa]          ;404
000026  b320              CBZ      r0,|L5.114|
000028  2600              MOVS     r6,#0                 ;405
00002a  b17f              CBZ      r7,|L5.76|
00002c  2f01              CMP      r7,#1                 ;406
00002e  d10c              BNE      |L5.74|
000030  e007              B        |L5.66|
                  |L5.50|
000032  2302              MOVS     r3,#2                 ;409
000034  461a              MOV      r2,r3                 ;409
000036  2100              MOVS     r1,#0                 ;409
000038  4620              MOV      r0,r4                 ;409
00003a  f7fffffe          BL       OS_EventTaskRdy
00003e  1c70              ADDS     r0,r6,#1              ;410
000040  b2c6              UXTB     r6,r0                 ;410
                  |L5.66|
000042  7aa0              LDRB     r0,[r4,#0xa]          ;408
000044  2800              CMP      r0,#0                 ;408
000046  d1f4              BNE      |L5.50|
000048  e009              B        |L5.94|
                  |L5.74|
00004a  bf00              NOP                            ;414
                  |L5.76|
00004c  2302              MOVS     r3,#2                 ;416
00004e  461a              MOV      r2,r3                 ;416
000050  2100              MOVS     r1,#0                 ;416
000052  4620              MOV      r0,r4                 ;416
000054  f7fffffe          BL       OS_EventTaskRdy
000058  1c70              ADDS     r0,r6,#1              ;417
00005a  b2c6              UXTB     r6,r0                 ;417
00005c  bf00              NOP                            ;418
                  |L5.94|
00005e  bf00              NOP                            ;412
000060  4640              MOV      r0,r8                 ;420
000062  f7fffffe          BL       OS_CPU_SR_Restore
000066  f7fffffe          BL       OS_Sched
00006a  200e              MOVS     r0,#0xe               ;422
00006c  7028              STRB     r0,[r5,#0]            ;422
00006e  4630              MOV      r0,r6                 ;423
000070  e7d3              B        |L5.26|
                  |L5.114|
000072  4640              MOV      r0,r8                 ;425
000074  f7fffffe          BL       OS_CPU_SR_Restore
000078  2000              MOVS     r0,#0                 ;426
00007a  7028              STRB     r0,[r5,#0]            ;426
00007c  bf00              NOP                            ;427
00007e  e7cc              B        |L5.26|
;;;429    #endif
                          ENDP


                          AREA ||i.OSMboxPost||, CODE, READONLY, ALIGN=1

                  OSMboxPost PROC
;;;454    #if OS_MBOX_POST_EN > 0
;;;455    INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
000000  b570              PUSH     {r4-r6,lr}
;;;456    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;457    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;458        OS_CPU_SR  cpu_sr = 0;
000006  2600              MOVS     r6,#0
;;;459    #endif
;;;460    
;;;461    
;;;462    
;;;463    #if OS_ARG_CHK_EN > 0
;;;464        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;465            return (OS_ERR_PEVENT_NULL);
;;;466        }
;;;467        if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
;;;468            return (OS_ERR_POST_NULL_PTR);
;;;469        }
;;;470    #endif
;;;471        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
000008  7820              LDRB     r0,[r4,#0]
00000a  2801              CMP      r0,#1
00000c  d001              BEQ      |L6.18|
;;;472            return (OS_ERR_EVENT_TYPE);
00000e  2001              MOVS     r0,#1
                  |L6.16|
;;;473        }
;;;474        OS_ENTER_CRITICAL();
;;;475        if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
;;;476                                                          /* Ready HPT waiting on event                    */
;;;477            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;478            OS_EXIT_CRITICAL();
;;;479            OS_Sched();                                   /* Find highest priority task ready to run       */
;;;480            return (OS_ERR_NONE);
;;;481        }
;;;482        if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
;;;483            OS_EXIT_CRITICAL();
;;;484            return (OS_ERR_MBOX_FULL);
;;;485        }
;;;486        pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
;;;487        OS_EXIT_CRITICAL();
;;;488        return (OS_ERR_NONE);
;;;489    }
000010  bd70              POP      {r4-r6,pc}
                  |L6.18|
000012  f7fffffe          BL       OS_CPU_SR_Save
000016  4606              MOV      r6,r0                 ;474
000018  7aa0              LDRB     r0,[r4,#0xa]          ;475
00001a  b160              CBZ      r0,|L6.54|
00001c  2300              MOVS     r3,#0                 ;477
00001e  2202              MOVS     r2,#2                 ;477
000020  4629              MOV      r1,r5                 ;477
000022  4620              MOV      r0,r4                 ;477
000024  f7fffffe          BL       OS_EventTaskRdy
000028  4630              MOV      r0,r6                 ;478
00002a  f7fffffe          BL       OS_CPU_SR_Restore
00002e  f7fffffe          BL       OS_Sched
000032  2000              MOVS     r0,#0                 ;480
000034  e7ec              B        |L6.16|
                  |L6.54|
000036  6860              LDR      r0,[r4,#4]            ;482
000038  b120              CBZ      r0,|L6.68|
00003a  4630              MOV      r0,r6                 ;483
00003c  f7fffffe          BL       OS_CPU_SR_Restore
000040  2014              MOVS     r0,#0x14              ;484
000042  e7e5              B        |L6.16|
                  |L6.68|
000044  6065              STR      r5,[r4,#4]            ;486
000046  4630              MOV      r0,r6                 ;487
000048  f7fffffe          BL       OS_CPU_SR_Restore
00004c  2000              MOVS     r0,#0                 ;488
00004e  e7df              B        |L6.16|
;;;490    #endif
                          ENDP


                          AREA ||i.OSMboxPostOpt||, CODE, READONLY, ALIGN=1

                  OSMboxPostOpt PROC
;;;525    #if OS_MBOX_POST_OPT_EN > 0
;;;526    INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;527    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;528    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;529        OS_CPU_SR  cpu_sr = 0;
00000a  2700              MOVS     r7,#0
;;;530    #endif
;;;531    
;;;532    
;;;533    
;;;534    #if OS_ARG_CHK_EN > 0
;;;535        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;536            return (OS_ERR_PEVENT_NULL);
;;;537        }
;;;538        if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
;;;539            return (OS_ERR_POST_NULL_PTR);
;;;540        }
;;;541    #endif
;;;542        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
00000c  7820              LDRB     r0,[r4,#0]
00000e  2801              CMP      r0,#1
000010  d002              BEQ      |L7.24|
;;;543            return (OS_ERR_EVENT_TYPE);
000012  2001              MOVS     r0,#1
                  |L7.20|
;;;544        }
;;;545        OS_ENTER_CRITICAL();
;;;546        if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
;;;547            if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
;;;548                while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
;;;549                    (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;550                }
;;;551            } else {                                      /* No,  Post to HPT waiting on mbox              */
;;;552                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
;;;553            }
;;;554            OS_EXIT_CRITICAL();
;;;555            if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
;;;556                OS_Sched();                               /* Find HPT ready to run                         */
;;;557            }
;;;558            return (OS_ERR_NONE);
;;;559        }
;;;560        if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
;;;561            OS_EXIT_CRITICAL();
;;;562            return (OS_ERR_MBOX_FULL);
;;;563        }
;;;564        pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
;;;565        OS_EXIT_CRITICAL();
;;;566        return (OS_ERR_NONE);
;;;567    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L7.24|
000018  f7fffffe          BL       OS_CPU_SR_Save
00001c  4607              MOV      r7,r0                 ;545
00001e  7aa0              LDRB     r0,[r4,#0xa]          ;546
000020  b1e8              CBZ      r0,|L7.94|
000022  f0050001          AND      r0,r5,#1              ;547
000026  b150              CBZ      r0,|L7.62|
000028  e005              B        |L7.54|
                  |L7.42|
00002a  2300              MOVS     r3,#0                 ;549
00002c  2202              MOVS     r2,#2                 ;549
00002e  4631              MOV      r1,r6                 ;549
000030  4620              MOV      r0,r4                 ;549
000032  f7fffffe          BL       OS_EventTaskRdy
                  |L7.54|
000036  7aa0              LDRB     r0,[r4,#0xa]          ;548
000038  2800              CMP      r0,#0                 ;548
00003a  d1f6              BNE      |L7.42|
00003c  e005              B        |L7.74|
                  |L7.62|
00003e  2300              MOVS     r3,#0                 ;552
000040  2202              MOVS     r2,#2                 ;552
000042  4631              MOV      r1,r6                 ;552
000044  4620              MOV      r0,r4                 ;552
000046  f7fffffe          BL       OS_EventTaskRdy
                  |L7.74|
00004a  4638              MOV      r0,r7                 ;554
00004c  f7fffffe          BL       OS_CPU_SR_Restore
000050  f0050004          AND      r0,r5,#4              ;555
000054  b908              CBNZ     r0,|L7.90|
000056  f7fffffe          BL       OS_Sched
                  |L7.90|
00005a  2000              MOVS     r0,#0                 ;558
00005c  e7da              B        |L7.20|
                  |L7.94|
00005e  6860              LDR      r0,[r4,#4]            ;560
000060  b120              CBZ      r0,|L7.108|
000062  4638              MOV      r0,r7                 ;561
000064  f7fffffe          BL       OS_CPU_SR_Restore
000068  2014              MOVS     r0,#0x14              ;562
00006a  e7d3              B        |L7.20|
                  |L7.108|
00006c  6066              STR      r6,[r4,#4]            ;564
00006e  4638              MOV      r0,r7                 ;565
000070  f7fffffe          BL       OS_CPU_SR_Restore
000074  2000              MOVS     r0,#0                 ;566
000076  e7cd              B        |L7.20|
;;;568    #endif
                          ENDP


                          AREA ||i.OSMboxQuery||, CODE, READONLY, ALIGN=1

                  OSMboxQuery PROC
;;;589    #if OS_MBOX_QUERY_EN > 0
;;;590    INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;591    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;592        INT8U      i;
;;;593    #if OS_LOWEST_PRIO <= 63
;;;594        INT8U     *psrc;
;;;595        INT8U     *pdest;
;;;596    #else
;;;597        INT16U    *psrc;
;;;598        INT16U    *pdest;
;;;599    #endif
;;;600    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;601        OS_CPU_SR  cpu_sr = 0;
000008  f04f0900          MOV      r9,#0
;;;602    #endif
;;;603    
;;;604    
;;;605    
;;;606    #if OS_ARG_CHK_EN > 0
;;;607        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;608            return (OS_ERR_PEVENT_NULL);
;;;609        }
;;;610        if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
;;;611            return (OS_ERR_PDATA_NULL);
;;;612        }
;;;613    #endif
;;;614        if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
00000c  7820              LDRB     r0,[r4,#0]
00000e  2801              CMP      r0,#1
000010  d002              BEQ      |L8.24|
;;;615            return (OS_ERR_EVENT_TYPE);
000012  2001              MOVS     r0,#1
                  |L8.20|
;;;616        }
;;;617        OS_ENTER_CRITICAL();
;;;618        p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
;;;619        psrc                    = &pevent->OSEventTbl[0];
;;;620        pdest                   = &p_mbox_data->OSEventTbl[0];
;;;621        for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
;;;622            *pdest++ = *psrc++;
;;;623        }
;;;624        p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
;;;625        OS_EXIT_CRITICAL();
;;;626        return (OS_ERR_NONE);
;;;627    }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L8.24|
000018  f7fffffe          BL       OS_CPU_SR_Save
00001c  4681              MOV      r9,r0                 ;617
00001e  7aa0              LDRB     r0,[r4,#0xa]          ;618
000020  7228              STRB     r0,[r5,#8]            ;618
000022  f104070b          ADD      r7,r4,#0xb            ;619
000026  f1050804          ADD      r8,r5,#4              ;620
00002a  2600              MOVS     r6,#0                 ;621
00002c  e005              B        |L8.58|
                  |L8.46|
00002e  f8170b01          LDRB     r0,[r7],#1            ;622
000032  f8080b01          STRB     r0,[r8],#1            ;622
000036  1c70              ADDS     r0,r6,#1              ;621
000038  b2c6              UXTB     r6,r0                 ;621
                  |L8.58|
00003a  2e04              CMP      r6,#4                 ;621
00003c  dbf7              BLT      |L8.46|
00003e  6860              LDR      r0,[r4,#4]            ;624
000040  6028              STR      r0,[r5,#0]            ;624
000042  4648              MOV      r0,r9                 ;625
000044  f7fffffe          BL       OS_CPU_SR_Restore
000048  2000              MOVS     r0,#0                 ;626
00004a  e7e3              B        |L8.20|
;;;628    #endif                                                     /* OS_MBOX_QUERY_EN                         */
                          ENDP

