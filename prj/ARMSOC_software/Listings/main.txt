; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\include -I.\TTS -I.\OLED -I.\ucosii\config -I.\ucosii\port -I.\ucosii\source -I.\RTE\_Target_1 -ID:\Coding\MDKeil\ARM\PACK\ARM\CMSIS\5.4.0\Device\ARM\ARMCM3\Include -ID:\Coding\MDKeil\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DARMCM3 --omf_browse=.\objects\main.crf src\main.c]
                          THUMB

                          AREA ||i.BSP_CPU_ClkFreq||, CODE, READONLY, ALIGN=2

                  BSP_CPU_ClkFreq PROC
;;;31     
;;;32     INT32U  BSP_CPU_ClkFreq (void)
000000  4800              LDR      r0,|L1.4|
;;;33     {
;;;34         return (25000000);
;;;35     }
000002  4770              BX       lr
;;;36     
                          ENDP

                  |L1.4|
                          DCD      0x017d7840

                          AREA ||i.OS_CPU_SysTickClkFreq||, CODE, READONLY, ALIGN=1

                  OS_CPU_SysTickClkFreq PROC
;;;36     
;;;37     INT32U  OS_CPU_SysTickClkFreq (void)
000000  b500              PUSH     {lr}
;;;38     {
;;;39         INT32U  freq;
;;;40     
;;;41     //	RCC_ClocksTypeDef rcc_clocks;
;;;42     //	RCC_GetClocksFreq(&rcc_clocks);
;;;43     
;;;44     //	freq = (INT32U)rcc_clocks.HCLK_Frequency;
;;;45         freq = BSP_CPU_ClkFreq();
000002  f7fffffe          BL       BSP_CPU_ClkFreq
000006  4601              MOV      r1,r0
;;;46         return (freq);
000008  4608              MOV      r0,r1
;;;47     }
00000a  bd00              POP      {pc}
;;;48     
                          ENDP


                          AREA ||i.led1_task||, CODE, READONLY, ALIGN=2

                  led1_task PROC
;;;89     	
;;;90     void led1_task(void *p_arg)
000000  e029              B        |L3.86|
                  |L3.2|
;;;91     {
;;;92     	while(1){
;;;93     
;;;94     	  bit_set(GPIO_DR, GPIO_PIN_6, 0X00);
000002  2200              MOVS     r2,#0
000004  2140              MOVS     r1,#0x40
000006  0608              LSLS     r0,r1,#24
000008  f7fffffe          BL       bit_set
;;;95     		OSTimeDly(500);
00000c  f44f70fa          MOV      r0,#0x1f4
000010  f7fffffe          BL       OSTimeDly
;;;96     		bit_set(GPIO_DR, GPIO_PIN_6, 0X01);
000014  2201              MOVS     r2,#1
000016  2140              MOVS     r1,#0x40
000018  0608              LSLS     r0,r1,#24
00001a  f7fffffe          BL       bit_set
;;;97     		OSTimeDly(500);
00001e  f44f70fa          MOV      r0,#0x1f4
000022  f7fffffe          BL       OSTimeDly
;;;98     		
;;;99     		bit_read(GPIO_EXT,GPIO_PIN_0);
000026  2101              MOVS     r1,#1
000028  480b              LDR      r0,|L3.88|
00002a  f7fffffe          BL       bit_read
;;;100    		bit_read(GPIO_EXT,GPIO_PIN_1);
00002e  2102              MOVS     r1,#2
000030  4809              LDR      r0,|L3.88|
000032  f7fffffe          BL       bit_read
;;;101    		bit_read(GPIO_EXT,GPIO_PIN_2);
000036  2104              MOVS     r1,#4
000038  4807              LDR      r0,|L3.88|
00003a  f7fffffe          BL       bit_read
;;;102    		bit_read(GPIO_EXT,GPIO_PIN_3);
00003e  2108              MOVS     r1,#8
000040  4805              LDR      r0,|L3.88|
000042  f7fffffe          BL       bit_read
;;;103    		bit_read(GPIO_EXT,GPIO_PIN_5);
000046  2120              MOVS     r1,#0x20
000048  4803              LDR      r0,|L3.88|
00004a  f7fffffe          BL       bit_read
;;;104    		bit_read(GPIO_EXT,GPIO_PIN_7);
00004e  2180              MOVS     r1,#0x80
000050  4801              LDR      r0,|L3.88|
000052  f7fffffe          BL       bit_read
                  |L3.86|
000056  e7d4              B        |L3.2|
;;;105    		
;;;106    			
;;;107    	}
;;;108    }
;;;109    
                          ENDP

                  |L3.88|
                          DCD      0x40000050

                          AREA ||i.led2_task||, CODE, READONLY, ALIGN=1

                  led2_task PROC
;;;110    
;;;111    	void led2_task(void *p_arg)
000000  e011              B        |L4.38|
                  |L4.2|
;;;112    {
;;;113    	while(1){
;;;114    
;;;115    	//	bit_set(GPIO_DR, GPIO_PIN_6, 0X00);
;;;116    		
;;;117    		  while(Uart1Getc() != 'a');
000002  bf00              NOP      
                  |L4.4|
000004  f7fffffe          BL       Uart1Getc
000008  2861              CMP      r0,#0x61
00000a  d1fb              BNE      |L4.4|
;;;118    			OSTimeDly(500);
00000c  f44f70fa          MOV      r0,#0x1f4
000010  f7fffffe          BL       OSTimeDly
;;;119    		  Uart1Putc('b');
000014  2062              MOVS     r0,#0x62
000016  f7fffffe          BL       Uart1Putc
;;;120    				
;;;121    			OSTimeDly(500);
00001a  f44f70fa          MOV      r0,#0x1f4
00001e  f7fffffe          BL       OSTimeDly
;;;122    			
;;;123    		while(1);
000022  bf00              NOP      
                  |L4.36|
000024  e7fe              B        |L4.36|
                  |L4.38|
000026  e7ec              B        |L4.2|
;;;124    			
;;;125    	}
;;;126    }
;;;127    
                          ENDP


                          AREA ||i.led3_task||, CODE, READONLY, ALIGN=1

                  led3_task PROC
;;;127    
;;;128    	void led3_task(void *p_arg)
000000  e011              B        |L5.38|
                  |L5.2|
;;;129    {
;;;130    	while(1){
;;;131    
;;;132    	//	bit_set(GPIO_DR, GPIO_PIN_6, 0X00);
;;;133    		
;;;134    		  while(Uart1Getc() != 'a');
000002  bf00              NOP      
                  |L5.4|
000004  f7fffffe          BL       Uart1Getc
000008  2861              CMP      r0,#0x61
00000a  d1fb              BNE      |L5.4|
;;;135    			OSTimeDly(500);
00000c  f44f70fa          MOV      r0,#0x1f4
000010  f7fffffe          BL       OSTimeDly
;;;136    		  Uart1Putc('b');
000014  2062              MOVS     r0,#0x62
000016  f7fffffe          BL       Uart1Putc
;;;137    				
;;;138    			OSTimeDly(500);
00001a  f44f70fa          MOV      r0,#0x1f4
00001e  f7fffffe          BL       OSTimeDly
;;;139    			
;;;140    		while(1);
000022  bf00              NOP      
                  |L5.36|
000024  e7fe              B        |L5.36|
                  |L5.38|
000026  e7ec              B        |L5.2|
;;;141    			
;;;142    	}
;;;143    }
;;;144    	
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;74     
;;;75     int main(void)
000000  b510              PUSH     {r4,lr}
;;;76     {
;;;77     	bit_set(GPIO_DDR, GPIO_PIN_All, 0X00);
000002  2200              MOVS     r2,#0
000004  21ff              MOVS     r1,#0xff
000006  4808              LDR      r0,|L6.40|
000008  f7fffffe          BL       bit_set
;;;78     	uart0init();
00000c  f7fffffe          BL       uart0init
;;;79     	OSInit();
000010  f7fffffe          BL       OSInit
;;;80     	OSTaskCreate(startup_task, (void *)0,
000014  230a              MOVS     r3,#0xa
000016  4a05              LDR      r2,|L6.44|
000018  2100              MOVS     r1,#0
00001a  4805              LDR      r0,|L6.48|
00001c  f7fffffe          BL       OSTaskCreate
;;;81     				 (OS_STK*)&startup_task_stk[STARTUP_TASK_STK_SIZE - 1], STARTUP_TASK_PRIO);
;;;82     	OSStart();
000020  f7fffffe          BL       OSStart
;;;83     	return 0;
000024  2000              MOVS     r0,#0
;;;84     
;;;85     }
000026  bd10              POP      {r4,pc}
;;;86     
                          ENDP

                  |L6.40|
                          DCD      0x40000004
                  |L6.44|
                          DCD      startup_task_stk+0xfc
                  |L6.48|
                          DCD      startup_task

                          AREA ||i.startup_task||, CODE, READONLY, ALIGN=2

                  startup_task PROC
;;;49     
;;;50     static void startup_task(void *p_arg)
000000  b570              PUSH     {r4-r6,lr}
;;;51     {
000002  4605              MOV      r5,r0
;;;52     
;;;53     	OS_CPU_SR cpu_sr = 0;
000004  2400              MOVS     r4,#0
;;;54     
;;;55     	OS_CPU_SysTickInit();
000006  f7fffffe          BL       OS_CPU_SysTickInit
;;;56     
;;;57     #if (OS_TASK_STAT_EN > 0)
;;;58     	OSStatInit();
00000a  f7fffffe          BL       OSStatInit
;;;59     #endif
;;;60     
;;;61     	OS_ENTER_CRITICAL();				//???(????)
00000e  f7fffffe          BL       OS_CPU_SR_Save
000012  4604              MOV      r4,r0
;;;62     
;;;63     	OSTaskCreate(led1_task, (void *)0,
000014  2306              MOVS     r3,#6
000016  4a0c              LDR      r2,|L7.72|
000018  2100              MOVS     r1,#0
00001a  480c              LDR      r0,|L7.76|
00001c  f7fffffe          BL       OSTaskCreate
;;;64     					   (OS_STK*)&LED1_TASK_STK[LED1_STK_SIZE - 1], LED1_TASK_PRIO);
;;;65     	OSTaskCreate(led2_task, (void *)0,
000020  2305              MOVS     r3,#5
000022  4a0b              LDR      r2,|L7.80|
000024  2100              MOVS     r1,#0
000026  480b              LDR      r0,|L7.84|
000028  f7fffffe          BL       OSTaskCreate
;;;66     					   (OS_STK*)&LED2_TASK_STK[LED2_STK_SIZE - 1], LED2_TASK_PRIO);
;;;67     	OSTaskCreate(led3_task, (void *)0,
00002c  2307              MOVS     r3,#7
00002e  4a0a              LDR      r2,|L7.88|
000030  2100              MOVS     r1,#0
000032  480a              LDR      r0,|L7.92|
000034  f7fffffe          BL       OSTaskCreate
;;;68     					   (OS_STK*)&LED3_TASK_STK[LED3_STK_SIZE - 1], LED3_TASK_PRIO);
;;;69     	OSTaskSuspend(STARTUP_TASK_PRIO);  	//??
000038  200a              MOVS     r0,#0xa
00003a  f7fffffe          BL       OSTaskSuspend
;;;70     	OS_EXIT_CRITICAL();					//??
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       OS_CPU_SR_Restore
;;;71     
;;;72     }
000044  bd70              POP      {r4-r6,pc}
;;;73     
                          ENDP

000046  0000              DCW      0x0000
                  |L7.72|
                          DCD      LED1_TASK_STK+0xfc
                  |L7.76|
                          DCD      led1_task
                  |L7.80|
                          DCD      LED2_TASK_STK+0xfc
                  |L7.84|
                          DCD      led2_task
                  |L7.88|
                          DCD      LED3_TASK_STK+0xfc
                  |L7.92|
                          DCD      led3_task

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  startup_task_stk
                          %        256
                  LED1_TASK_STK
                          %        256
                  LED2_TASK_STK
                          %        256
                  LED3_TASK_STK
                          %        256
                  Read_buff
                          %        16

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  cnt_d
                          DCD      0x00000000
                  ||str||
                          DCD      0x00000000
                  a
                          DCD      0x00000000
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  buff_size
                          DCD      0x0000000f
                  dat_count
                          DCD      0x00000000
                  buff_lenght
                          DCD      0x00000000
                  buff_useful
00001c  00000000          DCB      0x00,0x00,0x00,0x00
                  control
                          DCD      ||.conststring||

;*** Start embedded assembler ***

#line 1 "src\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_2a20148c____REV16|
#line 129 ".\\include\\core_cmInstr.h"
|__asm___6_main_c_2a20148c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_2a20148c____REVSH|
#line 144
|__asm___6_main_c_2a20148c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
