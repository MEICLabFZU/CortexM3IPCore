; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\os_cpu_c_keil.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\os_cpu_c_keil.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\include -I.\TTS -I.\OLED -I.\ucosii\config -I.\ucosii\port -I.\ucosii\source -I.\RTE\_Target_1 -ID:\Coding\MDKeil\ARM\PACK\ARM\CMSIS\5.4.0\Device\ARM\ARMCM3\Include -ID:\Coding\MDKeil\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DARMCM3 --omf_browse=.\objects\os_cpu_c_keil.crf ucosii\port\os_cpu_c_keil.c]
                          THUMB

                          AREA ||i.OSInitHookBegin||, CODE, READONLY, ALIGN=1

                  OSInitHookBegin PROC
;;;63     #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
;;;64     void  OSInitHookBegin (void)
000000  4770              BX       lr
;;;65     {
;;;66     #if OS_TMR_EN > 0
;;;67         OSTmrCtr = 0;
;;;68     #endif
;;;69     }
;;;70     #endif
                          ENDP


                          AREA ||i.OSInitHookEnd||, CODE, READONLY, ALIGN=1

                  OSInitHookEnd PROC
;;;84     #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
;;;85     void  OSInitHookEnd (void)
000000  4770              BX       lr
;;;86     {
;;;87     }
;;;88     #endif
                          ENDP


                          AREA ||i.OSTCBInitHook||, CODE, READONLY, ALIGN=1

                  OSTCBInitHook PROC
;;;271    #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
;;;272    void  OSTCBInitHook (OS_TCB *ptcb)
000000  4770              BX       lr
;;;273    {
;;;274    #if OS_APP_HOOKS_EN > 0
;;;275        App_TCBInitHook(ptcb);
;;;276    #else
;;;277        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;278    #endif
;;;279    }
;;;280    #endif
                          ENDP


                          AREA ||i.OSTaskCreateHook||, CODE, READONLY, ALIGN=1

                  OSTaskCreateHook PROC
;;;101    #if OS_CPU_HOOKS_EN > 0
;;;102    void  OSTaskCreateHook (OS_TCB *ptcb)
000000  4770              BX       lr
;;;103    {
;;;104    #if OS_APP_HOOKS_EN > 0
;;;105        App_TaskCreateHook(ptcb);
;;;106    #else
;;;107        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;108    #endif
;;;109    }
;;;110    #endif
                          ENDP


                          AREA ||i.OSTaskDelHook||, CODE, READONLY, ALIGN=1

                  OSTaskDelHook PROC
;;;124    #if OS_CPU_HOOKS_EN > 0
;;;125    void  OSTaskDelHook (OS_TCB *ptcb)
000000  4770              BX       lr
;;;126    {
;;;127    #if OS_APP_HOOKS_EN > 0
;;;128        App_TaskDelHook(ptcb);
;;;129    #else
;;;130        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;131    #endif
;;;132    }
;;;133    #endif
                          ENDP


                          AREA ||i.OSTaskIdleHook||, CODE, READONLY, ALIGN=1

                  OSTaskIdleHook PROC
;;;147    #if OS_CPU_HOOKS_EN > 0 && OS_VERSION >= 251
;;;148    void  OSTaskIdleHook (void)
000000  4770              BX       lr
;;;149    {
;;;150    #if OS_APP_HOOKS_EN > 0
;;;151        App_TaskIdleHook();
;;;152    #endif
;;;153    }
;;;154    #endif
                          ENDP


                          AREA ||i.OSTaskStatHook||, CODE, READONLY, ALIGN=1

                  OSTaskStatHook PROC
;;;167    #if OS_CPU_HOOKS_EN > 0
;;;168    void  OSTaskStatHook (void)
000000  4770              BX       lr
;;;169    {
;;;170    #if OS_APP_HOOKS_EN > 0
;;;171        App_TaskStatHook();
;;;172    #endif
;;;173    }
;;;174    #endif
                          ENDP


                          AREA ||i.OSTaskStkInit||, CODE, READONLY, ALIGN=1

                  OSTaskStkInit PROC
;;;204    
;;;205    OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)
000000  b570              PUSH     {r4-r6,lr}
;;;206    {
000002  4604              MOV      r4,r0
;;;207        OS_STK *stk;
;;;208    
;;;209    
;;;210        (void)opt;                                   /* 'opt' is not used, prevent warning                 */
;;;211        stk       = ptos;                            /* Load stack pointer                                 */
000004  4610              MOV      r0,r2
;;;212    
;;;213                                                     /* Registers stacked as if auto-saved on exception    */
;;;214        *(stk)    = (INT32U)0x01000000L;             /* xPSR                                               */
000006  f04f7580          MOV      r5,#0x1000000
00000a  6005              STR      r5,[r0,#0]
;;;215        *(--stk)  = (INT32U)task;                    /* Entry Point                                        */
00000c  1f05              SUBS     r5,r0,#4
00000e  4628              MOV      r0,r5
000010  602c              STR      r4,[r5,#0]
;;;216        *(--stk)  = (INT32U)0xFFFFFFFEL;             /* R14 (LR) (init value will cause fault if ever used)*/
000012  f06f0601          MVN      r6,#1
000016  1f05              SUBS     r5,r0,#4
000018  4628              MOV      r0,r5
00001a  602e              STR      r6,[r5,#0]
;;;217        *(--stk)  = (INT32U)0x12121212L;             /* R12                                                */
00001c  f04f3612          MOV      r6,#0x12121212
000020  1f05              SUBS     r5,r0,#4
000022  4628              MOV      r0,r5
000024  602e              STR      r6,[r5,#0]
;;;218        *(--stk)  = (INT32U)0x03030303L;             /* R3                                                 */
000026  f04f3603          MOV      r6,#0x3030303
00002a  1f05              SUBS     r5,r0,#4
00002c  4628              MOV      r0,r5
00002e  602e              STR      r6,[r5,#0]
;;;219        *(--stk)  = (INT32U)0x02020202L;             /* R2                                                 */
000030  f04f3602          MOV      r6,#0x2020202
000034  1f05              SUBS     r5,r0,#4
000036  4628              MOV      r0,r5
000038  602e              STR      r6,[r5,#0]
;;;220        *(--stk)  = (INT32U)0x01010101L;             /* R1                                                 */
00003a  1076              ASRS     r6,r6,#1
00003c  1f05              SUBS     r5,r0,#4
00003e  4628              MOV      r0,r5
000040  602e              STR      r6,[r5,#0]
;;;221        *(--stk)  = (INT32U)p_arg;                   /* R0 : argument                                      */
000042  1f05              SUBS     r5,r0,#4
000044  4628              MOV      r0,r5
000046  6029              STR      r1,[r5,#0]
;;;222    
;;;223                                                     /* Remaining registers saved on process stack         */
;;;224        *(--stk)  = (INT32U)0x11111111L;             /* R11                                                */
000048  f04f3611          MOV      r6,#0x11111111
00004c  1f05              SUBS     r5,r0,#4
00004e  4628              MOV      r0,r5
000050  602e              STR      r6,[r5,#0]
;;;225        *(--stk)  = (INT32U)0x10101010L;             /* R10                                                */
000052  f04f3610          MOV      r6,#0x10101010
000056  1f05              SUBS     r5,r0,#4
000058  4628              MOV      r0,r5
00005a  602e              STR      r6,[r5,#0]
;;;226        *(--stk)  = (INT32U)0x09090909L;             /* R9                                                 */
00005c  f04f3609          MOV      r6,#0x9090909
000060  1f05              SUBS     r5,r0,#4
000062  4628              MOV      r0,r5
000064  602e              STR      r6,[r5,#0]
;;;227        *(--stk)  = (INT32U)0x08080808L;             /* R8                                                 */
000066  f04f3608          MOV      r6,#0x8080808
00006a  1f05              SUBS     r5,r0,#4
00006c  4628              MOV      r0,r5
00006e  602e              STR      r6,[r5,#0]
;;;228        *(--stk)  = (INT32U)0x07070707L;             /* R7                                                 */
000070  f04f3607          MOV      r6,#0x7070707
000074  1f05              SUBS     r5,r0,#4
000076  4628              MOV      r0,r5
000078  602e              STR      r6,[r5,#0]
;;;229        *(--stk)  = (INT32U)0x06060606L;             /* R6                                                 */
00007a  f04f3606          MOV      r6,#0x6060606
00007e  1f05              SUBS     r5,r0,#4
000080  4628              MOV      r0,r5
000082  602e              STR      r6,[r5,#0]
;;;230        *(--stk)  = (INT32U)0x05050505L;             /* R5                                                 */
000084  f04f3605          MOV      r6,#0x5050505
000088  1f05              SUBS     r5,r0,#4
00008a  4628              MOV      r0,r5
00008c  602e              STR      r6,[r5,#0]
;;;231        *(--stk)  = (INT32U)0x04040404L;             /* R4                                                 */
00008e  f04f3604          MOV      r6,#0x4040404
000092  1f05              SUBS     r5,r0,#4
000094  4628              MOV      r0,r5
000096  602e              STR      r6,[r5,#0]
;;;232    
;;;233        return (stk);
;;;234    }
000098  bd70              POP      {r4-r6,pc}
;;;235    
                          ENDP


                          AREA ||i.OSTaskSwHook||, CODE, READONLY, ALIGN=1

                  OSTaskSwHook PROC
;;;251    #if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)
;;;252    void  OSTaskSwHook (void)
000000  4770              BX       lr
;;;253    {
;;;254    #if OS_APP_HOOKS_EN > 0
;;;255        App_TaskSwHook();
;;;256    #endif
;;;257    }
;;;258    #endif
                          ENDP


                          AREA ||i.OSTimeTickHook||, CODE, READONLY, ALIGN=1

                  OSTimeTickHook PROC
;;;294    #if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
;;;295    void  OSTimeTickHook (void)
000000  4770              BX       lr
;;;296    {
;;;297    #if OS_APP_HOOKS_EN > 0
;;;298        App_TimeTickHook();
;;;299    #endif
;;;300    
;;;301    #if OS_TMR_EN > 0
;;;302        OSTmrCtr++;
;;;303        if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
;;;304            OSTmrCtr = 0;
;;;305            OSTmrSignal();
;;;306        }
;;;307    #endif
;;;308    }
;;;309    #endif
                          ENDP


                          AREA ||i.OS_CPU_SysTickHandler||, CODE, READONLY, ALIGN=2

                  OS_CPU_SysTickHandler PROC
;;;325    
;;;326    void  OS_CPU_SysTickHandler (void)
000000  b510              PUSH     {r4,lr}
;;;327    {
;;;328        OS_CPU_SR  cpu_sr;
;;;329    
;;;330    
;;;331        OS_ENTER_CRITICAL();                         /* Tell uC/OS-II that we are starting an ISR          */
000002  f7fffffe          BL       OS_CPU_SR_Save
000006  4604              MOV      r4,r0
;;;332        OSIntNesting++;
000008  4806              LDR      r0,|L11.36|
00000a  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00000c  1c40              ADDS     r0,r0,#1
00000e  4905              LDR      r1,|L11.36|
000010  7008              STRB     r0,[r1,#0]
;;;333        OS_EXIT_CRITICAL();
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       OS_CPU_SR_Restore
;;;334    
;;;335        OSTimeTick();                                /* Call uC/OS-II's OSTimeTick()                       */
000018  f7fffffe          BL       OSTimeTick
;;;336    
;;;337        OSIntExit();                                 /* Tell uC/OS-II that we are leaving the ISR          */
00001c  f7fffffe          BL       OSIntExit
;;;338    }
000020  bd10              POP      {r4,pc}
;;;339    
                          ENDP

000022  0000              DCW      0x0000
                  |L11.36|
                          DCD      OSIntNesting

                          AREA ||i.OS_CPU_SysTickInit||, CODE, READONLY, ALIGN=1

                  OS_CPU_SysTickInit PROC
;;;352    
;;;353    void  OS_CPU_SysTickInit (void)
000000  b510              PUSH     {r4,lr}
;;;354    {
;;;355        INT32U  cnts;
;;;356    
;;;357    
;;;358        cnts = OS_CPU_SysTickClkFreq() / OS_TICKS_PER_SEC;
000002  f7fffffe          BL       OS_CPU_SysTickClkFreq
000006  f44f717a          MOV      r1,#0x3e8
00000a  fbb0f4f1          UDIV     r4,r0,r1
;;;359    	
;;;360    	  //cnts = SystemCoreClock / OS_TICKS_PER_SEC;
;;;361    
;;;362        OS_CPU_CM3_NVIC_ST_RELOAD = (cnts - 1);
00000e  1e60              SUBS     r0,r4,#1
000010  f04f21e0          MOV      r1,#0xe000e000
000014  6148              STR      r0,[r1,#0x14]
;;;363                                                     /* Enable timer.                                      */
;;;364        OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC | OS_CPU_CM3_NVIC_ST_CTRL_ENABLE;
000016  4608              MOV      r0,r1
000018  6900              LDR      r0,[r0,#0x10]
00001a  f0400005          ORR      r0,r0,#5
00001e  6108              STR      r0,[r1,#0x10]
;;;365                                                     /* Enable timer interrupt.                            */
;;;366        OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_INTEN;
000020  4608              MOV      r0,r1
000022  6900              LDR      r0,[r0,#0x10]
000024  f0400002          ORR      r0,r0,#2
000028  6108              STR      r0,[r1,#0x10]
;;;367    }
00002a  bd10              POP      {r4,pc}
                          ENDP

