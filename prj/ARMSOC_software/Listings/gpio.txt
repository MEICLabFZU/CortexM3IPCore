; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\objects\gpio.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\gpio.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\include -I.\TTS -I.\OLED -I.\ucosii\config -I.\ucosii\port -I.\ucosii\source -I.\RTE\_Target_1 -ID:\Coding\MDKeil\ARM\PACK\ARM\CMSIS\5.4.0\Device\ARM\ARMCM3\Include -ID:\Coding\MDKeil\ARM\CMSIS\Include -D__UVISION_VERSION=525 -DARMCM3 --omf_browse=.\objects\gpio.crf src\gpio.c]
                          THUMB

                          AREA ||i.IIC_Send_Byte||, CODE, READONLY, ALIGN=2

                  IIC_Send_Byte PROC
;;;98     
;;;99     void IIC_Send_Byte(uint8_t txd)
000000  b570              PUSH     {r4-r6,lr}
;;;100    {                        
000002  4604              MOV      r4,r0
;;;101        uint8_t t;   
;;;102    		SDA_OUT;
000004  2201              MOVS     r2,#1
000006  2108              MOVS     r1,#8
000008  4821              LDR      r0,|L1.144|
00000a  f7fffffe          BL       bit_set
00000e  2201              MOVS     r2,#1
000010  2110              MOVS     r1,#0x10
000012  481f              LDR      r0,|L1.144|
000014  f7fffffe          BL       bit_set
;;;103        IIC_SCLL;				//hold clk to low
000018  2200              MOVS     r2,#0
00001a  2108              MOVS     r1,#8
00001c  06c8              LSLS     r0,r1,#27
00001e  f7fffffe          BL       bit_set
;;;104    	for(t=0;t<8;t++)
000022  2500              MOVS     r5,#0
000024  e027              B        |L1.118|
                  |L1.38|
;;;105        {              
;;;106          if((txd&0x80)>>7 == 0x01)
000026  2001              MOVS     r0,#1
000028  ebb01fd4          CMP      r0,r4,LSR #7
00002c  d105              BNE      |L1.58|
;;;107    			{
;;;108    				IIC_SDAH;
00002e  2201              MOVS     r2,#1
000030  2110              MOVS     r1,#0x10
000032  0780              LSLS     r0,r0,#30
000034  f7fffffe          BL       bit_set
000038  e006              B        |L1.72|
                  |L1.58|
;;;109    			}
;;;110    			else if((txd&0x80)>>7 == 0x00)
00003a  09e0              LSRS     r0,r4,#7
00003c  b920              CBNZ     r0,|L1.72|
;;;111    			{
;;;112    				IIC_SDAL;
00003e  2200              MOVS     r2,#0
000040  2110              MOVS     r1,#0x10
000042  0688              LSLS     r0,r1,#26
000044  f7fffffe          BL       bit_set
                  |L1.72|
;;;113    			}
;;;114    
;;;115            txd<<=1; 	  
000048  0660              LSLS     r0,r4,#25
00004a  0e04              LSRS     r4,r0,#24
;;;116    				delay_us(1);   
00004c  2001              MOVS     r0,#1
00004e  f7fffffe          BL       delay_us
;;;117    				IIC_SCLH;
000052  2201              MOVS     r2,#1
000054  2108              MOVS     r1,#8
000056  06c8              LSLS     r0,r1,#27
000058  f7fffffe          BL       bit_set
;;;118    			  delay_us(1); 
00005c  2001              MOVS     r0,#1
00005e  f7fffffe          BL       delay_us
;;;119    				IIC_SCLL;	
000062  2200              MOVS     r2,#0
000064  2108              MOVS     r1,#8
000066  06c8              LSLS     r0,r1,#27
000068  f7fffffe          BL       bit_set
;;;120    				delay_us(1);
00006c  2001              MOVS     r0,#1
00006e  f7fffffe          BL       delay_us
000072  1c68              ADDS     r0,r5,#1              ;104
000074  b2c5              UXTB     r5,r0                 ;104
                  |L1.118|
000076  2d08              CMP      r5,#8                 ;104
000078  dbd5              BLT      |L1.38|
;;;121        }
;;;122    //	iic_send_test(txd);
;;;123    		IIC_SCLH;
00007a  2201              MOVS     r2,#1
00007c  2108              MOVS     r1,#8
00007e  06c8              LSLS     r0,r1,#27
000080  f7fffffe          BL       bit_set
;;;124    		IIC_SCLL;	
000084  2200              MOVS     r2,#0
000086  2108              MOVS     r1,#8
000088  06c8              LSLS     r0,r1,#27
00008a  f7fffffe          BL       bit_set
;;;125    
;;;126    //		IIC_Wait_Ack();
;;;127    } 	    
00008e  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP

                  |L1.144|
                          DCD      0x40000004

                          AREA ||i.IIC_Start||, CODE, READONLY, ALIGN=2

                  IIC_Start PROC
;;;53     
;;;54     	void IIC_Start(void)
000000  b510              PUSH     {r4,lr}
;;;55     {
;;;56     	SDA_OUT;
000002  2201              MOVS     r2,#1
000004  2108              MOVS     r1,#8
000006  4811              LDR      r0,|L2.76|
000008  f7fffffe          BL       bit_set
00000c  2201              MOVS     r2,#1
00000e  2110              MOVS     r1,#0x10
000010  480e              LDR      r0,|L2.76|
000012  f7fffffe          BL       bit_set
;;;57     	IIC_SDAH;	  	  
000016  2201              MOVS     r2,#1
000018  2110              MOVS     r1,#0x10
00001a  0688              LSLS     r0,r1,#26
00001c  f7fffffe          BL       bit_set
;;;58     	IIC_SCLH;
000020  2201              MOVS     r2,#1
000022  2108              MOVS     r1,#8
000024  06c8              LSLS     r0,r1,#27
000026  f7fffffe          BL       bit_set
;;;59     	delay_us(1);
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       delay_us
;;;60      	IIC_SDAL;		//START:when CLK is high,DATA change form high to low 
000030  2200              MOVS     r2,#0
000032  2110              MOVS     r1,#0x10
000034  0688              LSLS     r0,r1,#26
000036  f7fffffe          BL       bit_set
;;;61     	delay_us(1);
00003a  2001              MOVS     r0,#1
00003c  f7fffffe          BL       delay_us
;;;62     	IIC_SCLL;		//hold IIC bus, prepare to send data
000040  2200              MOVS     r2,#0
000042  2108              MOVS     r1,#8
000044  06c8              LSLS     r0,r1,#27
000046  f7fffffe          BL       bit_set
;;;63     }	  
00004a  bd10              POP      {r4,pc}
;;;64     
                          ENDP

                  |L2.76|
                          DCD      0x40000004

                          AREA ||i.IIC_Stop||, CODE, READONLY, ALIGN=2

                  IIC_Stop PROC
;;;64     
;;;65     void IIC_Stop(void)
000000  b510              PUSH     {r4,lr}
;;;66     {
;;;67     	SDA_OUT;
000002  2201              MOVS     r2,#1
000004  2108              MOVS     r1,#8
000006  4811              LDR      r0,|L3.76|
000008  f7fffffe          BL       bit_set
00000c  2201              MOVS     r2,#1
00000e  2110              MOVS     r1,#0x10
000010  480e              LDR      r0,|L3.76|
000012  f7fffffe          BL       bit_set
;;;68     	IIC_SCLL;
000016  2200              MOVS     r2,#0
000018  2108              MOVS     r1,#8
00001a  06c8              LSLS     r0,r1,#27
00001c  f7fffffe          BL       bit_set
;;;69     	IIC_SDAL;			//STOP:when CLK is high DATA change form low to high
000020  2200              MOVS     r2,#0
000022  2110              MOVS     r1,#0x10
000024  0688              LSLS     r0,r1,#26
000026  f7fffffe          BL       bit_set
;;;70      	delay_us(1);
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       delay_us
;;;71     	IIC_SCLH; 
000030  2201              MOVS     r2,#1
000032  2108              MOVS     r1,#8
000034  06c8              LSLS     r0,r1,#27
000036  f7fffffe          BL       bit_set
;;;72     	IIC_SDAH;			
00003a  2201              MOVS     r2,#1
00003c  2110              MOVS     r1,#0x10
00003e  0688              LSLS     r0,r1,#26
000040  f7fffffe          BL       bit_set
;;;73     	delay_us(1);							   	
000044  2001              MOVS     r0,#1
000046  f7fffffe          BL       delay_us
;;;74     }
00004a  bd10              POP      {r4,pc}
;;;75     
                          ENDP

                  |L3.76|
                          DCD      0x40000004

                          AREA ||i.IIC_Wait_Ack||, CODE, READONLY, ALIGN=2

                  IIC_Wait_Ack PROC
;;;75     
;;;76     uint8_t IIC_Wait_Ack(void)
000000  b510              PUSH     {r4,lr}
;;;77     {
;;;78     	uint8_t ucErrTime=0;
000002  2400              MOVS     r4,#0
;;;79     	IIC_SCLL;
000004  2200              MOVS     r2,#0
000006  2108              MOVS     r1,#8
000008  06c8              LSLS     r0,r1,#27
00000a  f7fffffe          BL       bit_set
;;;80     	delay_us(1);	 
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       delay_us
;;;81     	IIC_SDAH;
000014  2201              MOVS     r2,#1
000016  2110              MOVS     r1,#0x10
000018  0688              LSLS     r0,r1,#26
00001a  f7fffffe          BL       bit_set
;;;82     	delay_us(1);
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       delay_us
;;;83     	SDA_IN;
000024  2201              MOVS     r2,#1
000026  2108              MOVS     r1,#8
000028  4813              LDR      r0,|L4.120|
00002a  f7fffffe          BL       bit_set
00002e  2200              MOVS     r2,#0
000030  2110              MOVS     r1,#0x10
000032  4811              LDR      r0,|L4.120|
000034  f7fffffe          BL       bit_set
;;;84     	IIC_SCLH;
000038  2201              MOVS     r2,#1
00003a  2108              MOVS     r1,#8
00003c  06c8              LSLS     r0,r1,#27
00003e  f7fffffe          BL       bit_set
;;;85     	delay_us(1);	 
000042  2001              MOVS     r0,#1
000044  f7fffffe          BL       delay_us
;;;86     	while(READ_SDA)
000048  e007              B        |L4.90|
                  |L4.74|
;;;87     	{
;;;88     		ucErrTime++;
00004a  1c60              ADDS     r0,r4,#1
00004c  b2c4              UXTB     r4,r0
;;;89     		if(ucErrTime>250)
00004e  2cfa              CMP      r4,#0xfa
000050  dd03              BLE      |L4.90|
;;;90     		{
;;;91     			IIC_Stop();
000052  f7fffffe          BL       IIC_Stop
;;;92     			return 1;
000056  2001              MOVS     r0,#1
                  |L4.88|
;;;93     		}
;;;94     	}
;;;95     	IIC_SCLL;
;;;96     	return 0;  
;;;97     } 
000058  bd10              POP      {r4,pc}
                  |L4.90|
00005a  2110              MOVS     r1,#0x10              ;86
00005c  4806              LDR      r0,|L4.120|
00005e  304c              ADDS     r0,r0,#0x4c           ;86
000060  f7fffffe          BL       bit_read
000064  2800              CMP      r0,#0                 ;86
000066  d1f0              BNE      |L4.74|
000068  2200              MOVS     r2,#0                 ;95
00006a  2108              MOVS     r1,#8                 ;95
00006c  06c8              LSLS     r0,r1,#27             ;95
00006e  f7fffffe          BL       bit_set
000072  2000              MOVS     r0,#0                 ;96
000074  e7f0              B        |L4.88|
;;;98     
                          ENDP

000076  0000              DCW      0x0000
                  |L4.120|
                          DCD      0x40000004

                          AREA ||i.bit_read||, CODE, READONLY, ALIGN=1

                  bit_read PROC
;;;34     
;;;35     uint8_t bit_read(unsigned int* GPIO_X,uint8_t GPIO_PIN)
000000  b510              PUSH     {r4,lr}
;;;36     {
000002  4602              MOV      r2,r0
;;;37     	uint8_t bitmask;
;;;38     	uint8_t bitdata = 0xff;
000004  20ff              MOVS     r0,#0xff
;;;39     	bitmask = *GPIO_X & GPIO_PIN;
000006  6814              LDR      r4,[r2,#0]
000008  ea040301          AND      r3,r4,r1
;;;40     	if(!bitmask)
00000c  b90b              CBNZ     r3,|L5.18|
;;;41     	{
;;;42     		bitdata = 0;
00000e  2000              MOVS     r0,#0
000010  e000              B        |L5.20|
                  |L5.18|
;;;43     	}
;;;44     	else
;;;45     	{
;;;46     		bitdata = 1;
000012  2001              MOVS     r0,#1
                  |L5.20|
;;;47     	}
;;;48     	return bitdata;
;;;49     	
;;;50     }
000014  bd10              POP      {r4,pc}
;;;51     
                          ENDP


                          AREA ||i.bit_set||, CODE, READONLY, ALIGN=1

                  bit_set PROC
;;;11     
;;;12     void bit_set(unsigned int* GPIO_X, uint8_t GPIO_PIN, uint8_t flag)
000000  29ff              CMP      r1,#0xff
;;;13     {
;;;14     
;;;15     	if(GPIO_PIN == 0Xff)
000002  d101              BNE      |L6.8|
;;;16     	{
;;;17     		*GPIO_X = flag; 
000004  6002              STR      r2,[r0,#0]
000006  e00a              B        |L6.30|
                  |L6.8|
;;;18     	}
;;;19     	else
;;;20     	{
;;;21     		if(flag==0x01)
000008  2a01              CMP      r2,#1
00000a  d102              BNE      |L6.18|
;;;22     		{
;;;23     			*GPIO_X=*GPIO_X|GPIO_PIN;
00000c  6803              LDR      r3,[r0,#0]
00000e  430b              ORRS     r3,r3,r1
000010  6003              STR      r3,[r0,#0]
                  |L6.18|
;;;24     
;;;25     		}
;;;26     		if(flag==0x00)
000012  b922              CBNZ     r2,|L6.30|
;;;27     		{
;;;28     			GPIO_PIN=~GPIO_PIN;
000014  43cb              MVNS     r3,r1
000016  b2d9              UXTB     r1,r3
;;;29     			*GPIO_X=*GPIO_X&GPIO_PIN;
000018  6803              LDR      r3,[r0,#0]
00001a  400b              ANDS     r3,r3,r1
00001c  6003              STR      r3,[r0,#0]
                  |L6.30|
;;;30     		}
;;;31       }
;;;32     	
;;;33     }
00001e  4770              BX       lr
;;;34     
                          ENDP


                          AREA ||i.gpioint||, CODE, READONLY, ALIGN=2

                  gpioint PROC
;;;3      
;;;4      void gpioint()
000000  b500              PUSH     {lr}
;;;5      {
;;;6      	bit_set(GPIO_DDR, GPIO_PIN_All,0x00);
000002  2200              MOVS     r2,#0
000004  21ff              MOVS     r1,#0xff
000006  4807              LDR      r0,|L7.36|
000008  f7fffffe          BL       bit_set
;;;7      	bit_set(GPIO_DDR, GPIO_PIN_6,0x01);
00000c  2201              MOVS     r2,#1
00000e  2140              MOVS     r1,#0x40
000010  4804              LDR      r0,|L7.36|
000012  f7fffffe          BL       bit_set
;;;8      	bit_set(GPIO_DR, GPIO_PIN_6,0x00);
000016  2200              MOVS     r2,#0
000018  2140              MOVS     r1,#0x40
00001a  0608              LSLS     r0,r1,#24
00001c  f7fffffe          BL       bit_set
;;;9      }
000020  bd00              POP      {pc}
;;;10     
                          ENDP

000022  0000              DCW      0x0000
                  |L7.36|
                          DCD      0x40000004

;*** Start embedded assembler ***

#line 1 "src\\gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_gpio_c_gpioint____REV16|
#line 129 ".\\include\\core_cmInstr.h"
|__asm___6_gpio_c_gpioint____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_gpio_c_gpioint____REVSH|
#line 144
|__asm___6_gpio_c_gpioint____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
